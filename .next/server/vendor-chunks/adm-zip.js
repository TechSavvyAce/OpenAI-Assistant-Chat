/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/adm-zip";
exports.ids = ["vendor-chunks/adm-zip"];
exports.modules = {

/***/ "(rsc)/./node_modules/adm-zip/adm-zip.js":
/*!*****************************************!*\
  !*** ./node_modules/adm-zip/adm-zip.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst Utils = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/adm-zip/util/index.js\");\nconst pth = __webpack_require__(/*! path */ \"path\");\nconst ZipEntry = __webpack_require__(/*! ./zipEntry */ \"(rsc)/./node_modules/adm-zip/zipEntry.js\");\nconst ZipFile = __webpack_require__(/*! ./zipFile */ \"(rsc)/./node_modules/adm-zip/zipFile.js\");\nconst get_Bool = (val, def)=>typeof val === \"boolean\" ? val : def;\nconst get_Str = (val, def)=>typeof val === \"string\" ? val : def;\nconst defaultOptions = {\n    // option \"noSort\" : if true it disables files sorting\n    noSort: false,\n    // read entries during load (initial loading may be slower)\n    readEntries: false,\n    // default method is none\n    method: Utils.Constants.NONE,\n    // file system\n    fs: null\n};\nmodule.exports = function(/**String*/ input, /** object */ options) {\n    let inBuffer = null;\n    // create object based default options, allowing them to be overwritten\n    const opts = Object.assign(Object.create(null), defaultOptions);\n    // test input variable\n    if (input && \"object\" === typeof input) {\n        // if value is not buffer we accept it to be object with options\n        if (!(input instanceof Uint8Array)) {\n            Object.assign(opts, input);\n            input = opts.input ? opts.input : undefined;\n            if (opts.input) delete opts.input;\n        }\n        // if input is buffer\n        if (Buffer.isBuffer(input)) {\n            inBuffer = input;\n            opts.method = Utils.Constants.BUFFER;\n            input = undefined;\n        }\n    }\n    // assign options\n    Object.assign(opts, options);\n    // instanciate utils filesystem\n    const filetools = new Utils(opts);\n    // if input is file name we retrieve its content\n    if (input && \"string\" === typeof input) {\n        // load zip file\n        if (filetools.fs.existsSync(input)) {\n            opts.method = Utils.Constants.FILE;\n            opts.filename = input;\n            inBuffer = filetools.fs.readFileSync(input);\n        } else {\n            throw new Error(Utils.Errors.INVALID_FILENAME);\n        }\n    }\n    // create variable\n    const _zip = new ZipFile(inBuffer, opts);\n    const { canonical, sanitize } = Utils;\n    function getEntry(/**Object*/ entry) {\n        if (entry && _zip) {\n            var item;\n            // If entry was given as a file name\n            if (typeof entry === \"string\") item = _zip.getEntry(entry);\n            // if entry was given as a ZipEntry object\n            if (typeof entry === \"object\" && typeof entry.entryName !== \"undefined\" && typeof entry.header !== \"undefined\") item = _zip.getEntry(entry.entryName);\n            if (item) {\n                return item;\n            }\n        }\n        return null;\n    }\n    function fixPath(zipPath) {\n        const { join, normalize, sep } = pth.posix;\n        // convert windows file separators and normalize\n        return join(\".\", normalize(sep + zipPath.split(\"\\\\\").join(sep) + sep));\n    }\n    return {\n        /**\n         * Extracts the given entry from the archive and returns the content as a Buffer object\n         * @param entry ZipEntry object or String with the full path of the entry\n         *\n         * @return Buffer or Null in case of error\n         */ readFile: function(/**Object*/ entry, /*String, Buffer*/ pass) {\n            var item = getEntry(entry);\n            return item && item.getData(pass) || null;\n        },\n        /**\n         * Asynchronous readFile\n         * @param entry ZipEntry object or String with the full path of the entry\n         * @param callback\n         *\n         * @return Buffer or Null in case of error\n         */ readFileAsync: function(/**Object*/ entry, /**Function*/ callback) {\n            var item = getEntry(entry);\n            if (item) {\n                item.getDataAsync(callback);\n            } else {\n                callback(null, \"getEntry failed for:\" + entry);\n            }\n        },\n        /**\n         * Extracts the given entry from the archive and returns the content as plain text in the given encoding\n         * @param entry ZipEntry object or String with the full path of the entry\n         * @param encoding Optional. If no encoding is specified utf8 is used\n         *\n         * @return String\n         */ readAsText: function(/**Object*/ entry, /**String=*/ encoding) {\n            var item = getEntry(entry);\n            if (item) {\n                var data = item.getData();\n                if (data && data.length) {\n                    return data.toString(encoding || \"utf8\");\n                }\n            }\n            return \"\";\n        },\n        /**\n         * Asynchronous readAsText\n         * @param entry ZipEntry object or String with the full path of the entry\n         * @param callback\n         * @param encoding Optional. If no encoding is specified utf8 is used\n         *\n         * @return String\n         */ readAsTextAsync: function(/**Object*/ entry, /**Function*/ callback, /**String=*/ encoding) {\n            var item = getEntry(entry);\n            if (item) {\n                item.getDataAsync(function(data, err) {\n                    if (err) {\n                        callback(data, err);\n                        return;\n                    }\n                    if (data && data.length) {\n                        callback(data.toString(encoding || \"utf8\"));\n                    } else {\n                        callback(\"\");\n                    }\n                });\n            } else {\n                callback(\"\");\n            }\n        },\n        /**\n         * Remove the entry from the file or the entry and all it's nested directories and files if the given entry is a directory\n         *\n         * @param entry\n         */ deleteFile: function(/**Object*/ entry) {\n            // @TODO: test deleteFile\n            var item = getEntry(entry);\n            if (item) {\n                _zip.deleteEntry(item.entryName);\n            }\n        },\n        /**\n         * Adds a comment to the zip. The zip must be rewritten after adding the comment.\n         *\n         * @param comment\n         */ addZipComment: function(/**String*/ comment) {\n            // @TODO: test addZipComment\n            _zip.comment = comment;\n        },\n        /**\n         * Returns the zip comment\n         *\n         * @return String\n         */ getZipComment: function() {\n            return _zip.comment || \"\";\n        },\n        /**\n         * Adds a comment to a specified zipEntry. The zip must be rewritten after adding the comment\n         * The comment cannot exceed 65535 characters in length\n         *\n         * @param entry\n         * @param comment\n         */ addZipEntryComment: function(/**Object*/ entry, /**String*/ comment) {\n            var item = getEntry(entry);\n            if (item) {\n                item.comment = comment;\n            }\n        },\n        /**\n         * Returns the comment of the specified entry\n         *\n         * @param entry\n         * @return String\n         */ getZipEntryComment: function(/**Object*/ entry) {\n            var item = getEntry(entry);\n            if (item) {\n                return item.comment || \"\";\n            }\n            return \"\";\n        },\n        /**\n         * Updates the content of an existing entry inside the archive. The zip must be rewritten after updating the content\n         *\n         * @param entry\n         * @param content\n         */ updateFile: function(/**Object*/ entry, /**Buffer*/ content) {\n            var item = getEntry(entry);\n            if (item) {\n                item.setData(content);\n            }\n        },\n        /**\n         * Adds a file from the disk to the archive\n         *\n         * @param localPath File to add to zip\n         * @param zipPath Optional path inside the zip\n         * @param zipName Optional name for the file\n         */ addLocalFile: function(/**String*/ localPath, /**String=*/ zipPath, /**String=*/ zipName, /**String*/ comment) {\n            if (filetools.fs.existsSync(localPath)) {\n                // fix ZipPath\n                zipPath = zipPath ? fixPath(zipPath) : \"\";\n                // p - local file name\n                var p = localPath.split(\"\\\\\").join(\"/\").split(\"/\").pop();\n                // add file name into zippath\n                zipPath += zipName ? zipName : p;\n                // read file attributes\n                const _attr = filetools.fs.statSync(localPath);\n                // add file into zip file\n                this.addFile(zipPath, filetools.fs.readFileSync(localPath), comment, _attr);\n            } else {\n                throw new Error(Utils.Errors.FILE_NOT_FOUND.replace(\"%s\", localPath));\n            }\n        },\n        /**\n         * Adds a local directory and all its nested files and directories to the archive\n         *\n         * @param localPath\n         * @param zipPath optional path inside zip\n         * @param filter optional RegExp or Function if files match will\n         *               be included.\n         * @param {number | object} attr - number as unix file permissions, object as filesystem Stats object\n         */ addLocalFolder: function(/**String*/ localPath, /**String=*/ zipPath, /**=RegExp|Function*/ filter, /**=number|object*/ attr) {\n            // Prepare filter\n            if (filter instanceof RegExp) {\n                // if filter is RegExp wrap it\n                filter = function(rx) {\n                    return function(filename) {\n                        return rx.test(filename);\n                    };\n                }(filter);\n            } else if (\"function\" !== typeof filter) {\n                // if filter is not function we will replace it\n                filter = function() {\n                    return true;\n                };\n            }\n            // fix ZipPath\n            zipPath = zipPath ? fixPath(zipPath) : \"\";\n            // normalize the path first\n            localPath = pth.normalize(localPath);\n            if (filetools.fs.existsSync(localPath)) {\n                const items = filetools.findFiles(localPath);\n                const self = this;\n                if (items.length) {\n                    items.forEach(function(filepath) {\n                        var p = pth.relative(localPath, filepath).split(\"\\\\\").join(\"/\"); //windows fix\n                        if (filter(p)) {\n                            var stats = filetools.fs.statSync(filepath);\n                            if (stats.isFile()) {\n                                self.addFile(zipPath + p, filetools.fs.readFileSync(filepath), \"\", attr ? attr : stats);\n                            } else {\n                                self.addFile(zipPath + p + \"/\", Buffer.alloc(0), \"\", attr ? attr : stats);\n                            }\n                        }\n                    });\n                }\n            } else {\n                throw new Error(Utils.Errors.FILE_NOT_FOUND.replace(\"%s\", localPath));\n            }\n        },\n        /**\n         * Asynchronous addLocalFile\n         * @param localPath\n         * @param callback\n         * @param zipPath optional path inside zip\n         * @param filter optional RegExp or Function if files match will\n         *               be included.\n         */ addLocalFolderAsync: function(/*String*/ localPath, /*Function*/ callback, /*String*/ zipPath, /*RegExp|Function*/ filter) {\n            if (filter instanceof RegExp) {\n                filter = function(rx) {\n                    return function(filename) {\n                        return rx.test(filename);\n                    };\n                }(filter);\n            } else if (\"function\" !== typeof filter) {\n                filter = function() {\n                    return true;\n                };\n            }\n            // fix ZipPath\n            zipPath = zipPath ? fixPath(zipPath) : \"\";\n            // normalize the path first\n            localPath = pth.normalize(localPath);\n            var self = this;\n            filetools.fs.open(localPath, \"r\", function(err) {\n                if (err && err.code === \"ENOENT\") {\n                    callback(undefined, Utils.Errors.FILE_NOT_FOUND.replace(\"%s\", localPath));\n                } else if (err) {\n                    callback(undefined, err);\n                } else {\n                    var items = filetools.findFiles(localPath);\n                    var i = -1;\n                    var next = function() {\n                        i += 1;\n                        if (i < items.length) {\n                            var filepath = items[i];\n                            var p = pth.relative(localPath, filepath).split(\"\\\\\").join(\"/\"); //windows fix\n                            p = p.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\").replace(/[^\\x20-\\x7E]/g, \"\"); // accent fix\n                            if (filter(p)) {\n                                filetools.fs.stat(filepath, function(er0, stats) {\n                                    if (er0) callback(undefined, er0);\n                                    if (stats.isFile()) {\n                                        filetools.fs.readFile(filepath, function(er1, data) {\n                                            if (er1) {\n                                                callback(undefined, er1);\n                                            } else {\n                                                self.addFile(zipPath + p, data, \"\", stats);\n                                                next();\n                                            }\n                                        });\n                                    } else {\n                                        self.addFile(zipPath + p + \"/\", Buffer.alloc(0), \"\", stats);\n                                        next();\n                                    }\n                                });\n                            } else {\n                                process.nextTick(()=>{\n                                    next();\n                                });\n                            }\n                        } else {\n                            callback(true, undefined);\n                        }\n                    };\n                    next();\n                }\n            });\n        },\n        /**\n         *\n         * @param {string} localPath - path where files will be extracted\n         * @param {object} props - optional properties\n         * @param {string} props.zipPath - optional path inside zip\n         * @param {regexp, function} props.filter - RegExp or Function if files match will be included.\n         */ addLocalFolderPromise: function(/*String*/ localPath, /* object */ props) {\n            return new Promise((resolve, reject)=>{\n                const { filter, zipPath } = Object.assign({}, props);\n                this.addLocalFolderAsync(localPath, (done, err)=>{\n                    if (err) reject(err);\n                    if (done) resolve(this);\n                }, zipPath, filter);\n            });\n        },\n        /**\n         * Allows you to create a entry (file or directory) in the zip file.\n         * If you want to create a directory the entryName must end in / and a null buffer should be provided.\n         * Comment and attributes are optional\n         *\n         * @param {string} entryName\n         * @param {Buffer | string} content - file content as buffer or utf8 coded string\n         * @param {string} comment - file comment\n         * @param {number | object} attr - number as unix file permissions, object as filesystem Stats object\n         */ addFile: function(/**String*/ entryName, /**Buffer*/ content, /**String*/ comment, /**Number*/ attr) {\n            let entry = getEntry(entryName);\n            const update = entry != null;\n            // prepare new entry\n            if (!update) {\n                entry = new ZipEntry();\n                entry.entryName = entryName;\n            }\n            entry.comment = comment || \"\";\n            const isStat = \"object\" === typeof attr && attr instanceof filetools.fs.Stats;\n            // last modification time from file stats\n            if (isStat) {\n                entry.header.time = attr.mtime;\n            }\n            // Set file attribute\n            var fileattr = entry.isDirectory ? 0x10 : 0; // (MS-DOS directory flag)\n            // extended attributes field for Unix\n            // set file type either S_IFDIR / S_IFREG\n            let unix = entry.isDirectory ? 0x4000 : 0x8000;\n            if (isStat) {\n                // File attributes from file stats\n                unix |= 0xfff & attr.mode;\n            } else if (\"number\" === typeof attr) {\n                // attr from given attr values\n                unix |= 0xfff & attr;\n            } else {\n                // Default values:\n                unix |= entry.isDirectory ? 493 : 420; // permissions (drwxr-xr-x) or (-r-wr--r--)\n            }\n            fileattr = (fileattr | unix << 16) >>> 0; // add attributes\n            entry.attr = fileattr;\n            entry.setData(content);\n            if (!update) _zip.setEntry(entry);\n        },\n        /**\n         * Returns an array of ZipEntry objects representing the files and folders inside the archive\n         *\n         * @return Array\n         */ getEntries: function() {\n            return _zip ? _zip.entries : [];\n        },\n        /**\n         * Returns a ZipEntry object representing the file or folder specified by ``name``.\n         *\n         * @param name\n         * @return ZipEntry\n         */ getEntry: function(/**String*/ name) {\n            return getEntry(name);\n        },\n        getEntryCount: function() {\n            return _zip.getEntryCount();\n        },\n        forEach: function(callback) {\n            return _zip.forEach(callback);\n        },\n        /**\n         * Extracts the given entry to the given targetPath\n         * If the entry is a directory inside the archive, the entire directory and it's subdirectories will be extracted\n         *\n         * @param entry ZipEntry object or String with the full path of the entry\n         * @param targetPath Target folder where to write the file\n         * @param maintainEntryPath If maintainEntryPath is true and the entry is inside a folder, the entry folder\n         *                          will be created in targetPath as well. Default is TRUE\n         * @param overwrite If the file already exists at the target path, the file will be overwriten if this is true.\n         *                  Default is FALSE\n         * @param keepOriginalPermission The file will be set as the permission from the entry if this is true.\n         *                  Default is FALSE\n         * @param outFileName String If set will override the filename of the extracted file (Only works if the entry is a file)\n         *\n         * @return Boolean\n         */ extractEntryTo: function(/**Object*/ entry, /**String*/ targetPath, /**Boolean*/ maintainEntryPath, /**Boolean*/ overwrite, /**Boolean*/ keepOriginalPermission, /**String**/ outFileName) {\n            overwrite = get_Bool(overwrite, false);\n            keepOriginalPermission = get_Bool(keepOriginalPermission, false);\n            maintainEntryPath = get_Bool(maintainEntryPath, true);\n            outFileName = get_Str(outFileName, get_Str(keepOriginalPermission, undefined));\n            var item = getEntry(entry);\n            if (!item) {\n                throw new Error(Utils.Errors.NO_ENTRY);\n            }\n            var entryName = canonical(item.entryName);\n            var target = sanitize(targetPath, outFileName && !item.isDirectory ? outFileName : maintainEntryPath ? entryName : pth.basename(entryName));\n            if (item.isDirectory) {\n                var children = _zip.getEntryChildren(item);\n                children.forEach(function(child) {\n                    if (child.isDirectory) return;\n                    var content = child.getData();\n                    if (!content) {\n                        throw new Error(Utils.Errors.CANT_EXTRACT_FILE);\n                    }\n                    var name = canonical(child.entryName);\n                    var childName = sanitize(targetPath, maintainEntryPath ? name : pth.basename(name));\n                    // The reverse operation for attr depend on method addFile()\n                    const fileAttr = keepOriginalPermission ? child.header.fileAttr : undefined;\n                    filetools.writeFileTo(childName, content, overwrite, fileAttr);\n                });\n                return true;\n            }\n            var content = item.getData();\n            if (!content) throw new Error(Utils.Errors.CANT_EXTRACT_FILE);\n            if (filetools.fs.existsSync(target) && !overwrite) {\n                throw new Error(Utils.Errors.CANT_OVERRIDE);\n            }\n            // The reverse operation for attr depend on method addFile()\n            const fileAttr = keepOriginalPermission ? entry.header.fileAttr : undefined;\n            filetools.writeFileTo(target, content, overwrite, fileAttr);\n            return true;\n        },\n        /**\n         * Test the archive\n         *\n         */ test: function(pass) {\n            if (!_zip) {\n                return false;\n            }\n            for(var entry in _zip.entries){\n                try {\n                    if (entry.isDirectory) {\n                        continue;\n                    }\n                    var content = _zip.entries[entry].getData(pass);\n                    if (!content) {\n                        return false;\n                    }\n                } catch (err) {\n                    return false;\n                }\n            }\n            return true;\n        },\n        /**\n         * Extracts the entire archive to the given location\n         *\n         * @param targetPath Target location\n         * @param overwrite If the file already exists at the target path, the file will be overwriten if this is true.\n         *                  Default is FALSE\n         * @param keepOriginalPermission The file will be set as the permission from the entry if this is true.\n         *                  Default is FALSE\n         */ extractAllTo: function(/**String*/ targetPath, /**Boolean*/ overwrite, /**Boolean*/ keepOriginalPermission, /*String, Buffer*/ pass) {\n            overwrite = get_Bool(overwrite, false);\n            pass = get_Str(keepOriginalPermission, pass);\n            keepOriginalPermission = get_Bool(keepOriginalPermission, false);\n            if (!_zip) {\n                throw new Error(Utils.Errors.NO_ZIP);\n            }\n            _zip.entries.forEach(function(entry) {\n                var entryName = sanitize(targetPath, canonical(entry.entryName.toString()));\n                if (entry.isDirectory) {\n                    filetools.makeDir(entryName);\n                    return;\n                }\n                var content = entry.getData(pass);\n                if (!content) {\n                    throw new Error(Utils.Errors.CANT_EXTRACT_FILE);\n                }\n                // The reverse operation for attr depend on method addFile()\n                const fileAttr = keepOriginalPermission ? entry.header.fileAttr : undefined;\n                filetools.writeFileTo(entryName, content, overwrite, fileAttr);\n                try {\n                    filetools.fs.utimesSync(entryName, entry.header.time, entry.header.time);\n                } catch (err) {\n                    throw new Error(Utils.Errors.CANT_EXTRACT_FILE);\n                }\n            });\n        },\n        /**\n         * Asynchronous extractAllTo\n         *\n         * @param targetPath Target location\n         * @param overwrite If the file already exists at the target path, the file will be overwriten if this is true.\n         *                  Default is FALSE\n         * @param keepOriginalPermission The file will be set as the permission from the entry if this is true.\n         *                  Default is FALSE\n         * @param callback The callback will be executed when all entries are extracted successfully or any error is thrown.\n         */ extractAllToAsync: function(/**String*/ targetPath, /**Boolean*/ overwrite, /**Boolean*/ keepOriginalPermission, /**Function*/ callback) {\n            overwrite = get_Bool(overwrite, false);\n            if (typeof keepOriginalPermission === \"function\" && !callback) callback = keepOriginalPermission;\n            keepOriginalPermission = get_Bool(keepOriginalPermission, false);\n            if (!callback) {\n                callback = function(err) {\n                    throw new Error(err);\n                };\n            }\n            if (!_zip) {\n                callback(new Error(Utils.Errors.NO_ZIP));\n                return;\n            }\n            targetPath = pth.resolve(targetPath);\n            // convert entryName to\n            const getPath = (entry)=>sanitize(targetPath, pth.normalize(canonical(entry.entryName.toString())));\n            const getError = (msg, file)=>new Error(msg + ': \"' + file + '\"');\n            // separate directories from files\n            const dirEntries = [];\n            const fileEntries = new Set();\n            _zip.entries.forEach((e)=>{\n                if (e.isDirectory) {\n                    dirEntries.push(e);\n                } else {\n                    fileEntries.add(e);\n                }\n            });\n            // Create directory entries first synchronously\n            // this prevents race condition and assures folders are there before writing files\n            for (const entry of dirEntries){\n                const dirPath = getPath(entry);\n                // The reverse operation for attr depend on method addFile()\n                const dirAttr = keepOriginalPermission ? entry.header.fileAttr : undefined;\n                try {\n                    filetools.makeDir(dirPath);\n                    if (dirAttr) filetools.fs.chmodSync(dirPath, dirAttr);\n                    // in unix timestamp will change if files are later added to folder, but still\n                    filetools.fs.utimesSync(dirPath, entry.header.time, entry.header.time);\n                } catch (er) {\n                    callback(getError(\"Unable to create folder\", dirPath));\n                }\n            }\n            // callback wrapper, for some house keeping\n            const done = ()=>{\n                if (fileEntries.size === 0) {\n                    callback();\n                }\n            };\n            // Extract file entries asynchronously\n            for (const entry of fileEntries.values()){\n                const entryName = pth.normalize(canonical(entry.entryName.toString()));\n                const filePath = sanitize(targetPath, entryName);\n                entry.getDataAsync(function(content, err_1) {\n                    if (err_1) {\n                        callback(new Error(err_1));\n                        return;\n                    }\n                    if (!content) {\n                        callback(new Error(Utils.Errors.CANT_EXTRACT_FILE));\n                    } else {\n                        // The reverse operation for attr depend on method addFile()\n                        const fileAttr = keepOriginalPermission ? entry.header.fileAttr : undefined;\n                        filetools.writeFileToAsync(filePath, content, overwrite, fileAttr, function(succ) {\n                            if (!succ) {\n                                callback(getError(\"Unable to write file\", filePath));\n                                return;\n                            }\n                            filetools.fs.utimes(filePath, entry.header.time, entry.header.time, function(err_2) {\n                                if (err_2) {\n                                    callback(getError(\"Unable to set times\", filePath));\n                                    return;\n                                }\n                                fileEntries.delete(entry);\n                                // call the callback if it was last entry\n                                done();\n                            });\n                        });\n                    }\n                });\n            }\n            // call the callback if fileEntries was empty\n            done();\n        },\n        /**\n         * Writes the newly created zip file to disk at the specified location or if a zip was opened and no ``targetFileName`` is provided, it will overwrite the opened zip\n         *\n         * @param targetFileName\n         * @param callback\n         */ writeZip: function(/**String*/ targetFileName, /**Function*/ callback) {\n            if (arguments.length === 1) {\n                if (typeof targetFileName === \"function\") {\n                    callback = targetFileName;\n                    targetFileName = \"\";\n                }\n            }\n            if (!targetFileName && opts.filename) {\n                targetFileName = opts.filename;\n            }\n            if (!targetFileName) return;\n            var zipData = _zip.compressToBuffer();\n            if (zipData) {\n                var ok = filetools.writeFileTo(targetFileName, zipData, true);\n                if (typeof callback === \"function\") callback(!ok ? new Error(\"failed\") : null, \"\");\n            }\n        },\n        writeZipPromise: function(/**String*/ targetFileName, /* object */ props) {\n            const { overwrite, perm } = Object.assign({\n                overwrite: true\n            }, props);\n            return new Promise((resolve, reject)=>{\n                // find file name\n                if (!targetFileName && opts.filename) targetFileName = opts.filename;\n                if (!targetFileName) reject(\"ADM-ZIP: ZIP File Name Missing\");\n                this.toBufferPromise().then((zipData)=>{\n                    const ret = (done)=>done ? resolve(done) : reject(\"ADM-ZIP: Wasn't able to write zip file\");\n                    filetools.writeFileToAsync(targetFileName, zipData, overwrite, perm, ret);\n                }, reject);\n            });\n        },\n        toBufferPromise: function() {\n            return new Promise((resolve, reject)=>{\n                _zip.toAsyncBuffer(resolve, reject);\n            });\n        },\n        /**\n         * Returns the content of the entire zip file as a Buffer object\n         *\n         * @return Buffer\n         */ toBuffer: function(/**Function=*/ onSuccess, /**Function=*/ onFail, /**Function=*/ onItemStart, /**Function=*/ onItemEnd) {\n            this.valueOf = 2;\n            if (typeof onSuccess === \"function\") {\n                _zip.toAsyncBuffer(onSuccess, onFail, onItemStart, onItemEnd);\n                return null;\n            }\n            return _zip.compressToBuffer();\n        }\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/adm-zip/adm-zip.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/adm-zip/headers/entryHeader.js":
/*!*****************************************************!*\
  !*** ./node_modules/adm-zip/headers/entryHeader.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nvar Utils = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/adm-zip/util/index.js\"), Constants = Utils.Constants;\n/* The central directory file header */ module.exports = function() {\n    var _verMade = 20, _version = 10, _flags = 0, _method = 0, _time = 0, _crc = 0, _compressedSize = 0, _size = 0, _fnameLen = 0, _extraLen = 0, _comLen = 0, _diskStart = 0, _inattr = 0, _attr = 0, _offset = 0;\n    _verMade |= Utils.isWin ? 0x0a00 : 0x0300;\n    // Set EFS flag since filename and comment fields are all by default encoded using UTF-8.\n    // Without it file names may be corrupted for other apps when file names use unicode chars\n    _flags |= Constants.FLG_EFS;\n    var _dataHeader = {};\n    function setTime(val1) {\n        val1 = new Date(val1);\n        _time = (val1.getFullYear() - 1980 & 0x7f) << 25 | // b09-16 years from 1980\n        val1.getMonth() + 1 << 21 | // b05-08 month\n        val1.getDate() << 16 | // b00-04 hour\n        // 2 bytes time\n        val1.getHours() << 11 | // b11-15 hour\n        val1.getMinutes() << 5 | // b05-10 minute\n        val1.getSeconds() >> 1; // b00-04 seconds divided by 2\n    }\n    setTime(+new Date());\n    return {\n        get made () {\n            return _verMade;\n        },\n        set made (val){\n            _verMade = val;\n        },\n        get version () {\n            return _version;\n        },\n        set version (val){\n            _version = val;\n        },\n        get flags () {\n            return _flags;\n        },\n        set flags (val){\n            _flags = val;\n        },\n        get method () {\n            return _method;\n        },\n        set method (val){\n            switch(val){\n                case Constants.STORED:\n                    this.version = 10;\n                case Constants.DEFLATED:\n                default:\n                    this.version = 20;\n            }\n            _method = val;\n        },\n        get time () {\n            return new Date((_time >> 25 & 0x7f) + 1980, (_time >> 21 & 0x0f) - 1, _time >> 16 & 0x1f, _time >> 11 & 0x1f, _time >> 5 & 0x3f, (_time & 0x1f) << 1);\n        },\n        set time (val){\n            setTime(val);\n        },\n        get crc () {\n            return _crc;\n        },\n        set crc (val){\n            _crc = Math.max(0, val) >>> 0;\n        },\n        get compressedSize () {\n            return _compressedSize;\n        },\n        set compressedSize (val){\n            _compressedSize = Math.max(0, val) >>> 0;\n        },\n        get size () {\n            return _size;\n        },\n        set size (val){\n            _size = Math.max(0, val) >>> 0;\n        },\n        get fileNameLength () {\n            return _fnameLen;\n        },\n        set fileNameLength (val){\n            _fnameLen = val;\n        },\n        get extraLength () {\n            return _extraLen;\n        },\n        set extraLength (val){\n            _extraLen = val;\n        },\n        get commentLength () {\n            return _comLen;\n        },\n        set commentLength (val){\n            _comLen = val;\n        },\n        get diskNumStart () {\n            return _diskStart;\n        },\n        set diskNumStart (val){\n            _diskStart = Math.max(0, val) >>> 0;\n        },\n        get inAttr () {\n            return _inattr;\n        },\n        set inAttr (val){\n            _inattr = Math.max(0, val) >>> 0;\n        },\n        get attr () {\n            return _attr;\n        },\n        set attr (val){\n            _attr = Math.max(0, val) >>> 0;\n        },\n        // get Unix file permissions\n        get fileAttr () {\n            return _attr ? (_attr >>> 0 | 0) >> 16 & 0xfff : 0;\n        },\n        get offset () {\n            return _offset;\n        },\n        set offset (val){\n            _offset = Math.max(0, val) >>> 0;\n        },\n        get encripted () {\n            return (_flags & 1) === 1;\n        },\n        get entryHeaderSize () {\n            return Constants.CENHDR + _fnameLen + _extraLen + _comLen;\n        },\n        get realDataOffset () {\n            return _offset + Constants.LOCHDR + _dataHeader.fnameLen + _dataHeader.extraLen;\n        },\n        get dataHeader () {\n            return _dataHeader;\n        },\n        loadDataHeaderFromBinary: function(/*Buffer*/ input) {\n            var data = input.slice(_offset, _offset + Constants.LOCHDR);\n            // 30 bytes and should start with \"PK\\003\\004\"\n            if (data.readUInt32LE(0) !== Constants.LOCSIG) {\n                throw new Error(Utils.Errors.INVALID_LOC);\n            }\n            _dataHeader = {\n                // version needed to extract\n                version: data.readUInt16LE(Constants.LOCVER),\n                // general purpose bit flag\n                flags: data.readUInt16LE(Constants.LOCFLG),\n                // compression method\n                method: data.readUInt16LE(Constants.LOCHOW),\n                // modification time (2 bytes time, 2 bytes date)\n                time: data.readUInt32LE(Constants.LOCTIM),\n                // uncompressed file crc-32 value\n                crc: data.readUInt32LE(Constants.LOCCRC),\n                // compressed size\n                compressedSize: data.readUInt32LE(Constants.LOCSIZ),\n                // uncompressed size\n                size: data.readUInt32LE(Constants.LOCLEN),\n                // filename length\n                fnameLen: data.readUInt16LE(Constants.LOCNAM),\n                // extra field length\n                extraLen: data.readUInt16LE(Constants.LOCEXT)\n            };\n        },\n        loadFromBinary: function(/*Buffer*/ data) {\n            // data should be 46 bytes and start with \"PK 01 02\"\n            if (data.length !== Constants.CENHDR || data.readUInt32LE(0) !== Constants.CENSIG) {\n                throw new Error(Utils.Errors.INVALID_CEN);\n            }\n            // version made by\n            _verMade = data.readUInt16LE(Constants.CENVEM);\n            // version needed to extract\n            _version = data.readUInt16LE(Constants.CENVER);\n            // encrypt, decrypt flags\n            _flags = data.readUInt16LE(Constants.CENFLG);\n            // compression method\n            _method = data.readUInt16LE(Constants.CENHOW);\n            // modification time (2 bytes time, 2 bytes date)\n            _time = data.readUInt32LE(Constants.CENTIM);\n            // uncompressed file crc-32 value\n            _crc = data.readUInt32LE(Constants.CENCRC);\n            // compressed size\n            _compressedSize = data.readUInt32LE(Constants.CENSIZ);\n            // uncompressed size\n            _size = data.readUInt32LE(Constants.CENLEN);\n            // filename length\n            _fnameLen = data.readUInt16LE(Constants.CENNAM);\n            // extra field length\n            _extraLen = data.readUInt16LE(Constants.CENEXT);\n            // file comment length\n            _comLen = data.readUInt16LE(Constants.CENCOM);\n            // volume number start\n            _diskStart = data.readUInt16LE(Constants.CENDSK);\n            // internal file attributes\n            _inattr = data.readUInt16LE(Constants.CENATT);\n            // external file attributes\n            _attr = data.readUInt32LE(Constants.CENATX);\n            // LOC header offset\n            _offset = data.readUInt32LE(Constants.CENOFF);\n        },\n        dataHeaderToBinary: function() {\n            // LOC header size (30 bytes)\n            var data = Buffer.alloc(Constants.LOCHDR);\n            // \"PK\\003\\004\"\n            data.writeUInt32LE(Constants.LOCSIG, 0);\n            // version needed to extract\n            data.writeUInt16LE(_version, Constants.LOCVER);\n            // general purpose bit flag\n            data.writeUInt16LE(_flags, Constants.LOCFLG);\n            // compression method\n            data.writeUInt16LE(_method, Constants.LOCHOW);\n            // modification time (2 bytes time, 2 bytes date)\n            data.writeUInt32LE(_time, Constants.LOCTIM);\n            // uncompressed file crc-32 value\n            data.writeUInt32LE(_crc, Constants.LOCCRC);\n            // compressed size\n            data.writeUInt32LE(_compressedSize, Constants.LOCSIZ);\n            // uncompressed size\n            data.writeUInt32LE(_size, Constants.LOCLEN);\n            // filename length\n            data.writeUInt16LE(_fnameLen, Constants.LOCNAM);\n            // extra field length\n            data.writeUInt16LE(_extraLen, Constants.LOCEXT);\n            return data;\n        },\n        entryHeaderToBinary: function() {\n            // CEN header size (46 bytes)\n            var data = Buffer.alloc(Constants.CENHDR + _fnameLen + _extraLen + _comLen);\n            // \"PK\\001\\002\"\n            data.writeUInt32LE(Constants.CENSIG, 0);\n            // version made by\n            data.writeUInt16LE(_verMade, Constants.CENVEM);\n            // version needed to extract\n            data.writeUInt16LE(_version, Constants.CENVER);\n            // encrypt, decrypt flags\n            data.writeUInt16LE(_flags, Constants.CENFLG);\n            // compression method\n            data.writeUInt16LE(_method, Constants.CENHOW);\n            // modification time (2 bytes time, 2 bytes date)\n            data.writeUInt32LE(_time, Constants.CENTIM);\n            // uncompressed file crc-32 value\n            data.writeUInt32LE(_crc, Constants.CENCRC);\n            // compressed size\n            data.writeUInt32LE(_compressedSize, Constants.CENSIZ);\n            // uncompressed size\n            data.writeUInt32LE(_size, Constants.CENLEN);\n            // filename length\n            data.writeUInt16LE(_fnameLen, Constants.CENNAM);\n            // extra field length\n            data.writeUInt16LE(_extraLen, Constants.CENEXT);\n            // file comment length\n            data.writeUInt16LE(_comLen, Constants.CENCOM);\n            // volume number start\n            data.writeUInt16LE(_diskStart, Constants.CENDSK);\n            // internal file attributes\n            data.writeUInt16LE(_inattr, Constants.CENATT);\n            // external file attributes\n            data.writeUInt32LE(_attr, Constants.CENATX);\n            // LOC header offset\n            data.writeUInt32LE(_offset, Constants.CENOFF);\n            // fill all with\n            data.fill(0x00, Constants.CENHDR);\n            return data;\n        },\n        toJSON: function() {\n            const bytes = function(nr) {\n                return nr + \" bytes\";\n            };\n            return {\n                made: _verMade,\n                version: _version,\n                flags: _flags,\n                method: Utils.methodToString(_method),\n                time: this.time,\n                crc: \"0x\" + _crc.toString(16).toUpperCase(),\n                compressedSize: bytes(_compressedSize),\n                size: bytes(_size),\n                fileNameLength: bytes(_fnameLen),\n                extraLength: bytes(_extraLen),\n                commentLength: bytes(_comLen),\n                diskNumStart: _diskStart,\n                inAttr: _inattr,\n                attr: _attr,\n                offset: _offset,\n                entryHeaderSize: bytes(Constants.CENHDR + _fnameLen + _extraLen + _comLen)\n            };\n        },\n        toString: function() {\n            return JSON.stringify(this.toJSON(), null, \"\t\");\n        }\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/adm-zip/headers/entryHeader.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/adm-zip/headers/index.js":
/*!***********************************************!*\
  !*** ./node_modules/adm-zip/headers/index.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("exports.EntryHeader = __webpack_require__(/*! ./entryHeader */ \"(rsc)/./node_modules/adm-zip/headers/entryHeader.js\");\nexports.MainHeader = __webpack_require__(/*! ./mainHeader */ \"(rsc)/./node_modules/adm-zip/headers/mainHeader.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYWRtLXppcC9oZWFkZXJzL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBQSxxSEFBOEM7QUFDOUNBLGtIQUE0QyIsInNvdXJjZXMiOlsid2VicGFjazovL21vbmRheUFzc2lzdGFudC8uL25vZGVfbW9kdWxlcy9hZG0temlwL2hlYWRlcnMvaW5kZXguanM/OTFkYiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnRzLkVudHJ5SGVhZGVyID0gcmVxdWlyZShcIi4vZW50cnlIZWFkZXJcIik7XG5leHBvcnRzLk1haW5IZWFkZXIgPSByZXF1aXJlKFwiLi9tYWluSGVhZGVyXCIpO1xuIl0sIm5hbWVzIjpbImV4cG9ydHMiLCJFbnRyeUhlYWRlciIsInJlcXVpcmUiLCJNYWluSGVhZGVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/adm-zip/headers/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/adm-zip/headers/mainHeader.js":
/*!****************************************************!*\
  !*** ./node_modules/adm-zip/headers/mainHeader.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nvar Utils = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/adm-zip/util/index.js\"), Constants = Utils.Constants;\n/* The entries in the end of central directory */ module.exports = function() {\n    var _volumeEntries = 0, _totalEntries = 0, _size = 0, _offset = 0, _commentLength = 0;\n    return {\n        get diskEntries () {\n            return _volumeEntries;\n        },\n        set diskEntries (/*Number*/ val){\n            _volumeEntries = _totalEntries = val;\n        },\n        get totalEntries () {\n            return _totalEntries;\n        },\n        set totalEntries (/*Number*/ val){\n            _totalEntries = _volumeEntries = val;\n        },\n        get size () {\n            return _size;\n        },\n        set size (/*Number*/ val){\n            _size = val;\n        },\n        get offset () {\n            return _offset;\n        },\n        set offset (/*Number*/ val){\n            _offset = val;\n        },\n        get commentLength () {\n            return _commentLength;\n        },\n        set commentLength (/*Number*/ val){\n            _commentLength = val;\n        },\n        get mainHeaderSize () {\n            return Constants.ENDHDR + _commentLength;\n        },\n        loadFromBinary: function(/*Buffer*/ data) {\n            // data should be 22 bytes and start with \"PK 05 06\"\n            // or be 56+ bytes and start with \"PK 06 06\" for Zip64\n            if ((data.length !== Constants.ENDHDR || data.readUInt32LE(0) !== Constants.ENDSIG) && (data.length < Constants.ZIP64HDR || data.readUInt32LE(0) !== Constants.ZIP64SIG)) {\n                throw new Error(Utils.Errors.INVALID_END);\n            }\n            if (data.readUInt32LE(0) === Constants.ENDSIG) {\n                // number of entries on this volume\n                _volumeEntries = data.readUInt16LE(Constants.ENDSUB);\n                // total number of entries\n                _totalEntries = data.readUInt16LE(Constants.ENDTOT);\n                // central directory size in bytes\n                _size = data.readUInt32LE(Constants.ENDSIZ);\n                // offset of first CEN header\n                _offset = data.readUInt32LE(Constants.ENDOFF);\n                // zip file comment length\n                _commentLength = data.readUInt16LE(Constants.ENDCOM);\n            } else {\n                // number of entries on this volume\n                _volumeEntries = Utils.readBigUInt64LE(data, Constants.ZIP64SUB);\n                // total number of entries\n                _totalEntries = Utils.readBigUInt64LE(data, Constants.ZIP64TOT);\n                // central directory size in bytes\n                _size = Utils.readBigUInt64LE(data, Constants.ZIP64SIZE);\n                // offset of first CEN header\n                _offset = Utils.readBigUInt64LE(data, Constants.ZIP64OFF);\n                _commentLength = 0;\n            }\n        },\n        toBinary: function() {\n            var b = Buffer.alloc(Constants.ENDHDR + _commentLength);\n            // \"PK 05 06\" signature\n            b.writeUInt32LE(Constants.ENDSIG, 0);\n            b.writeUInt32LE(0, 4);\n            // number of entries on this volume\n            b.writeUInt16LE(_volumeEntries, Constants.ENDSUB);\n            // total number of entries\n            b.writeUInt16LE(_totalEntries, Constants.ENDTOT);\n            // central directory size in bytes\n            b.writeUInt32LE(_size, Constants.ENDSIZ);\n            // offset of first CEN header\n            b.writeUInt32LE(_offset, Constants.ENDOFF);\n            // zip file comment length\n            b.writeUInt16LE(_commentLength, Constants.ENDCOM);\n            // fill comment memory with spaces so no garbage is left there\n            b.fill(\" \", Constants.ENDHDR);\n            return b;\n        },\n        toJSON: function() {\n            // creates 0x0000 style output\n            const offset = function(nr, len) {\n                let offs = nr.toString(16).toUpperCase();\n                while(offs.length < len)offs = \"0\" + offs;\n                return \"0x\" + offs;\n            };\n            return {\n                diskEntries: _volumeEntries,\n                totalEntries: _totalEntries,\n                size: _size + \" bytes\",\n                offset: offset(_offset, 4),\n                commentLength: _commentLength\n            };\n        },\n        toString: function() {\n            return JSON.stringify(this.toJSON(), null, \"\t\");\n        }\n    };\n}; // Misspelled \n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/adm-zip/headers/mainHeader.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/adm-zip/methods/deflater.js":
/*!**************************************************!*\
  !*** ./node_modules/adm-zip/methods/deflater.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nmodule.exports = function(/*Buffer*/ inbuf) {\n    var zlib = __webpack_require__(/*! zlib */ \"zlib\");\n    var opts = {\n        chunkSize: (parseInt(inbuf.length / 1024) + 1) * 1024\n    };\n    return {\n        deflate: function() {\n            return zlib.deflateRawSync(inbuf, opts);\n        },\n        deflateAsync: function(/*Function*/ callback) {\n            var tmp = zlib.createDeflateRaw(opts), parts = [], total = 0;\n            tmp.on(\"data\", function(data) {\n                parts.push(data);\n                total += data.length;\n            });\n            tmp.on(\"end\", function() {\n                var buf = Buffer.alloc(total), written = 0;\n                buf.fill(0);\n                for(var i = 0; i < parts.length; i++){\n                    var part = parts[i];\n                    part.copy(buf, written);\n                    written += part.length;\n                }\n                callback && callback(buf);\n            });\n            tmp.end(inbuf);\n        }\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYWRtLXppcC9tZXRob2RzL2RlZmxhdGVyLmpzIiwibWFwcGluZ3MiOiI7QUFBQUEsT0FBT0MsT0FBTyxHQUFHLFNBQVUsUUFBUSxHQUFHQyxLQUFLO0lBQ3ZDLElBQUlDLE9BQU9DLG1CQUFPQSxDQUFDLGtCQUFNO0lBRXpCLElBQUlDLE9BQU87UUFBRUMsV0FBVyxDQUFDQyxTQUFTTCxNQUFNTSxNQUFNLEdBQUcsUUFBUSxLQUFLO0lBQUs7SUFFbkUsT0FBTztRQUNIQyxTQUFTO1lBQ0wsT0FBT04sS0FBS08sY0FBYyxDQUFDUixPQUFPRztRQUN0QztRQUVBTSxjQUFjLFNBQVUsVUFBVSxHQUFHQyxRQUFRO1lBQ3pDLElBQUlDLE1BQU1WLEtBQUtXLGdCQUFnQixDQUFDVCxPQUM1QlUsUUFBUSxFQUFFLEVBQ1ZDLFFBQVE7WUFDWkgsSUFBSUksRUFBRSxDQUFDLFFBQVEsU0FBVUMsSUFBSTtnQkFDekJILE1BQU1JLElBQUksQ0FBQ0Q7Z0JBQ1hGLFNBQVNFLEtBQUtWLE1BQU07WUFDeEI7WUFDQUssSUFBSUksRUFBRSxDQUFDLE9BQU87Z0JBQ1YsSUFBSUcsTUFBTUMsT0FBT0MsS0FBSyxDQUFDTixRQUNuQk8sVUFBVTtnQkFDZEgsSUFBSUksSUFBSSxDQUFDO2dCQUNULElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJVixNQUFNUCxNQUFNLEVBQUVpQixJQUFLO29CQUNuQyxJQUFJQyxPQUFPWCxLQUFLLENBQUNVLEVBQUU7b0JBQ25CQyxLQUFLQyxJQUFJLENBQUNQLEtBQUtHO29CQUNmQSxXQUFXRyxLQUFLbEIsTUFBTTtnQkFDMUI7Z0JBQ0FJLFlBQVlBLFNBQVNRO1lBQ3pCO1lBQ0FQLElBQUllLEdBQUcsQ0FBQzFCO1FBQ1o7SUFDSjtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbW9uZGF5QXNzaXN0YW50Ly4vbm9kZV9tb2R1bGVzL2FkbS16aXAvbWV0aG9kcy9kZWZsYXRlci5qcz8wMmQzIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKC8qQnVmZmVyKi8gaW5idWYpIHtcbiAgICB2YXIgemxpYiA9IHJlcXVpcmUoXCJ6bGliXCIpO1xuXG4gICAgdmFyIG9wdHMgPSB7IGNodW5rU2l6ZTogKHBhcnNlSW50KGluYnVmLmxlbmd0aCAvIDEwMjQpICsgMSkgKiAxMDI0IH07XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBkZWZsYXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gemxpYi5kZWZsYXRlUmF3U3luYyhpbmJ1Ziwgb3B0cyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZGVmbGF0ZUFzeW5jOiBmdW5jdGlvbiAoLypGdW5jdGlvbiovIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICB2YXIgdG1wID0gemxpYi5jcmVhdGVEZWZsYXRlUmF3KG9wdHMpLFxuICAgICAgICAgICAgICAgIHBhcnRzID0gW10sXG4gICAgICAgICAgICAgICAgdG90YWwgPSAwO1xuICAgICAgICAgICAgdG1wLm9uKFwiZGF0YVwiLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIHBhcnRzLnB1c2goZGF0YSk7XG4gICAgICAgICAgICAgICAgdG90YWwgKz0gZGF0YS5sZW5ndGg7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRtcC5vbihcImVuZFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGJ1ZiA9IEJ1ZmZlci5hbGxvYyh0b3RhbCksXG4gICAgICAgICAgICAgICAgICAgIHdyaXR0ZW4gPSAwO1xuICAgICAgICAgICAgICAgIGJ1Zi5maWxsKDApO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFydHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBhcnQgPSBwYXJ0c1tpXTtcbiAgICAgICAgICAgICAgICAgICAgcGFydC5jb3B5KGJ1Ziwgd3JpdHRlbik7XG4gICAgICAgICAgICAgICAgICAgIHdyaXR0ZW4gKz0gcGFydC5sZW5ndGg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKGJ1Zik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRtcC5lbmQoaW5idWYpO1xuICAgICAgICB9XG4gICAgfTtcbn07XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImluYnVmIiwiemxpYiIsInJlcXVpcmUiLCJvcHRzIiwiY2h1bmtTaXplIiwicGFyc2VJbnQiLCJsZW5ndGgiLCJkZWZsYXRlIiwiZGVmbGF0ZVJhd1N5bmMiLCJkZWZsYXRlQXN5bmMiLCJjYWxsYmFjayIsInRtcCIsImNyZWF0ZURlZmxhdGVSYXciLCJwYXJ0cyIsInRvdGFsIiwib24iLCJkYXRhIiwicHVzaCIsImJ1ZiIsIkJ1ZmZlciIsImFsbG9jIiwid3JpdHRlbiIsImZpbGwiLCJpIiwicGFydCIsImNvcHkiLCJlbmQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/adm-zip/methods/deflater.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/adm-zip/methods/index.js":
/*!***********************************************!*\
  !*** ./node_modules/adm-zip/methods/index.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("exports.Deflater = __webpack_require__(/*! ./deflater */ \"(rsc)/./node_modules/adm-zip/methods/deflater.js\");\nexports.Inflater = __webpack_require__(/*! ./inflater */ \"(rsc)/./node_modules/adm-zip/methods/inflater.js\");\nexports.ZipCrypto = __webpack_require__(/*! ./zipcrypto */ \"(rsc)/./node_modules/adm-zip/methods/zipcrypto.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYWRtLXppcC9tZXRob2RzL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBQSw0R0FBd0M7QUFDeENBLDRHQUF3QztBQUN4Q0EsK0dBQTBDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbW9uZGF5QXNzaXN0YW50Ly4vbm9kZV9tb2R1bGVzL2FkbS16aXAvbWV0aG9kcy9pbmRleC5qcz9lZTQ2Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydHMuRGVmbGF0ZXIgPSByZXF1aXJlKFwiLi9kZWZsYXRlclwiKTtcbmV4cG9ydHMuSW5mbGF0ZXIgPSByZXF1aXJlKFwiLi9pbmZsYXRlclwiKTtcbmV4cG9ydHMuWmlwQ3J5cHRvID0gcmVxdWlyZShcIi4vemlwY3J5cHRvXCIpO1xuIl0sIm5hbWVzIjpbImV4cG9ydHMiLCJEZWZsYXRlciIsInJlcXVpcmUiLCJJbmZsYXRlciIsIlppcENyeXB0byJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/adm-zip/methods/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/adm-zip/methods/inflater.js":
/*!**************************************************!*\
  !*** ./node_modules/adm-zip/methods/inflater.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nmodule.exports = function(/*Buffer*/ inbuf) {\n    var zlib = __webpack_require__(/*! zlib */ \"zlib\");\n    return {\n        inflate: function() {\n            return zlib.inflateRawSync(inbuf);\n        },\n        inflateAsync: function(/*Function*/ callback) {\n            var tmp = zlib.createInflateRaw(), parts = [], total = 0;\n            tmp.on(\"data\", function(data) {\n                parts.push(data);\n                total += data.length;\n            });\n            tmp.on(\"end\", function() {\n                var buf = Buffer.alloc(total), written = 0;\n                buf.fill(0);\n                for(var i = 0; i < parts.length; i++){\n                    var part = parts[i];\n                    part.copy(buf, written);\n                    written += part.length;\n                }\n                callback && callback(buf);\n            });\n            tmp.end(inbuf);\n        }\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYWRtLXppcC9tZXRob2RzL2luZmxhdGVyLmpzIiwibWFwcGluZ3MiOiI7QUFBQUEsT0FBT0MsT0FBTyxHQUFHLFNBQVUsUUFBUSxHQUFHQyxLQUFLO0lBQ3ZDLElBQUlDLE9BQU9DLG1CQUFPQSxDQUFDLGtCQUFNO0lBRXpCLE9BQU87UUFDSEMsU0FBUztZQUNMLE9BQU9GLEtBQUtHLGNBQWMsQ0FBQ0o7UUFDL0I7UUFFQUssY0FBYyxTQUFVLFVBQVUsR0FBR0MsUUFBUTtZQUN6QyxJQUFJQyxNQUFNTixLQUFLTyxnQkFBZ0IsSUFDM0JDLFFBQVEsRUFBRSxFQUNWQyxRQUFRO1lBQ1pILElBQUlJLEVBQUUsQ0FBQyxRQUFRLFNBQVVDLElBQUk7Z0JBQ3pCSCxNQUFNSSxJQUFJLENBQUNEO2dCQUNYRixTQUFTRSxLQUFLRSxNQUFNO1lBQ3hCO1lBQ0FQLElBQUlJLEVBQUUsQ0FBQyxPQUFPO2dCQUNWLElBQUlJLE1BQU1DLE9BQU9DLEtBQUssQ0FBQ1AsUUFDbkJRLFVBQVU7Z0JBQ2RILElBQUlJLElBQUksQ0FBQztnQkFDVCxJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSVgsTUFBTUssTUFBTSxFQUFFTSxJQUFLO29CQUNuQyxJQUFJQyxPQUFPWixLQUFLLENBQUNXLEVBQUU7b0JBQ25CQyxLQUFLQyxJQUFJLENBQUNQLEtBQUtHO29CQUNmQSxXQUFXRyxLQUFLUCxNQUFNO2dCQUMxQjtnQkFDQVIsWUFBWUEsU0FBU1M7WUFDekI7WUFDQVIsSUFBSWdCLEdBQUcsQ0FBQ3ZCO1FBQ1o7SUFDSjtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbW9uZGF5QXNzaXN0YW50Ly4vbm9kZV9tb2R1bGVzL2FkbS16aXAvbWV0aG9kcy9pbmZsYXRlci5qcz8zZmZhIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKC8qQnVmZmVyKi8gaW5idWYpIHtcbiAgICB2YXIgemxpYiA9IHJlcXVpcmUoXCJ6bGliXCIpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgaW5mbGF0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHpsaWIuaW5mbGF0ZVJhd1N5bmMoaW5idWYpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGluZmxhdGVBc3luYzogZnVuY3Rpb24gKC8qRnVuY3Rpb24qLyBjYWxsYmFjaykge1xuICAgICAgICAgICAgdmFyIHRtcCA9IHpsaWIuY3JlYXRlSW5mbGF0ZVJhdygpLFxuICAgICAgICAgICAgICAgIHBhcnRzID0gW10sXG4gICAgICAgICAgICAgICAgdG90YWwgPSAwO1xuICAgICAgICAgICAgdG1wLm9uKFwiZGF0YVwiLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIHBhcnRzLnB1c2goZGF0YSk7XG4gICAgICAgICAgICAgICAgdG90YWwgKz0gZGF0YS5sZW5ndGg7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRtcC5vbihcImVuZFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGJ1ZiA9IEJ1ZmZlci5hbGxvYyh0b3RhbCksXG4gICAgICAgICAgICAgICAgICAgIHdyaXR0ZW4gPSAwO1xuICAgICAgICAgICAgICAgIGJ1Zi5maWxsKDApO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFydHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBhcnQgPSBwYXJ0c1tpXTtcbiAgICAgICAgICAgICAgICAgICAgcGFydC5jb3B5KGJ1Ziwgd3JpdHRlbik7XG4gICAgICAgICAgICAgICAgICAgIHdyaXR0ZW4gKz0gcGFydC5sZW5ndGg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKGJ1Zik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRtcC5lbmQoaW5idWYpO1xuICAgICAgICB9XG4gICAgfTtcbn07XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImluYnVmIiwiemxpYiIsInJlcXVpcmUiLCJpbmZsYXRlIiwiaW5mbGF0ZVJhd1N5bmMiLCJpbmZsYXRlQXN5bmMiLCJjYWxsYmFjayIsInRtcCIsImNyZWF0ZUluZmxhdGVSYXciLCJwYXJ0cyIsInRvdGFsIiwib24iLCJkYXRhIiwicHVzaCIsImxlbmd0aCIsImJ1ZiIsIkJ1ZmZlciIsImFsbG9jIiwid3JpdHRlbiIsImZpbGwiLCJpIiwicGFydCIsImNvcHkiLCJlbmQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/adm-zip/methods/inflater.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/adm-zip/methods/zipcrypto.js":
/*!***************************************************!*\
  !*** ./node_modules/adm-zip/methods/zipcrypto.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n// node crypt, we use it for generate salt\n// eslint-disable-next-line node/no-unsupported-features/node-builtins\nconst { randomFillSync } = __webpack_require__(/*! crypto */ \"crypto\");\n// generate CRC32 lookup table\nconst crctable = new Uint32Array(256).map((t, crc)=>{\n    for(let j = 0; j < 8; j++){\n        if (0 !== (crc & 1)) {\n            crc = crc >>> 1 ^ 0xedb88320;\n        } else {\n            crc >>>= 1;\n        }\n    }\n    return crc >>> 0;\n});\n// C-style uInt32 Multiply (discards higher bits, when JS multiply discards lower bits)\nconst uMul = (a, b)=>Math.imul(a, b) >>> 0;\n// crc32 byte single update (actually same function is part of utils.crc32 function :) )\nconst crc32update = (pCrc32, bval)=>{\n    return crctable[(pCrc32 ^ bval) & 0xff] ^ pCrc32 >>> 8;\n};\n// function for generating salt for encrytion header\nconst genSalt = ()=>{\n    if (\"function\" === typeof randomFillSync) {\n        return randomFillSync(Buffer.alloc(12));\n    } else {\n        // fallback if function is not defined\n        return genSalt.node();\n    }\n};\n// salt generation with node random function (mainly as fallback)\ngenSalt.node = ()=>{\n    const salt = Buffer.alloc(12);\n    const len = salt.length;\n    for(let i = 0; i < len; i++)salt[i] = Math.random() * 256 & 0xff;\n    return salt;\n};\n// general config\nconst config = {\n    genSalt\n};\n// Class Initkeys handles same basic ops with keys\nfunction Initkeys(pw) {\n    const pass = Buffer.isBuffer(pw) ? pw : Buffer.from(pw);\n    this.keys = new Uint32Array([\n        0x12345678,\n        0x23456789,\n        0x34567890\n    ]);\n    for(let i = 0; i < pass.length; i++){\n        this.updateKeys(pass[i]);\n    }\n}\nInitkeys.prototype.updateKeys = function(byteValue) {\n    const keys = this.keys;\n    keys[0] = crc32update(keys[0], byteValue);\n    keys[1] += keys[0] & 0xff;\n    keys[1] = uMul(keys[1], 134775813) + 1;\n    keys[2] = crc32update(keys[2], keys[1] >>> 24);\n    return byteValue;\n};\nInitkeys.prototype.next = function() {\n    const k = (this.keys[2] | 2) >>> 0; // key\n    return uMul(k, k ^ 1) >> 8 & 0xff; // decode\n};\nfunction make_decrypter(/*Buffer*/ pwd) {\n    // 1. Stage initialize key\n    const keys = new Initkeys(pwd);\n    // return decrypter function\n    return function(/*Buffer*/ data) {\n        // result - we create new Buffer for results\n        const result = Buffer.alloc(data.length);\n        let pos = 0;\n        // process input data\n        for (let c of data){\n            //c ^= keys.next();\n            //result[pos++] = c; // decode & Save Value\n            result[pos++] = keys.updateKeys(c ^ keys.next()); // update keys with decoded byte\n        }\n        return result;\n    };\n}\nfunction make_encrypter(/*Buffer*/ pwd) {\n    // 1. Stage initialize key\n    const keys = new Initkeys(pwd);\n    // return encrypting function, result and pos is here so we dont have to merge buffers later\n    return function(/*Buffer*/ data, /*Buffer*/ result, /* Number */ pos = 0) {\n        // result - we create new Buffer for results\n        if (!result) result = Buffer.alloc(data.length);\n        // process input data\n        for (let c of data){\n            const k = keys.next(); // save key byte\n            result[pos++] = c ^ k; // save val\n            keys.updateKeys(c); // update keys with decoded byte\n        }\n        return result;\n    };\n}\nfunction decrypt(/*Buffer*/ data, /*Object*/ header, /*String, Buffer*/ pwd) {\n    if (!data || !Buffer.isBuffer(data) || data.length < 12) {\n        return Buffer.alloc(0);\n    }\n    // 1. We Initialize and generate decrypting function\n    const decrypter = make_decrypter(pwd);\n    // 2. decrypt salt what is always 12 bytes and is a part of file content\n    const salt = decrypter(data.slice(0, 12));\n    // 3. does password meet expectations\n    if (salt[11] !== header.crc >>> 24) {\n        throw \"ADM-ZIP: Wrong Password\";\n    }\n    // 4. decode content\n    return decrypter(data.slice(12));\n}\n// lets add way to populate salt, NOT RECOMMENDED for production but maybe useful for testing general functionality\nfunction _salter(data) {\n    if (Buffer.isBuffer(data) && data.length >= 12) {\n        // be aware - currently salting buffer data is modified\n        config.genSalt = function() {\n            return data.slice(0, 12);\n        };\n    } else if (data === \"node\") {\n        // test salt generation with node random function\n        config.genSalt = genSalt.node;\n    } else {\n        // if value is not acceptable config gets reset.\n        config.genSalt = genSalt;\n    }\n}\nfunction encrypt(/*Buffer*/ data, /*Object*/ header, /*String, Buffer*/ pwd, /*Boolean*/ oldlike = false) {\n    // 1. test data if data is not Buffer we make buffer from it\n    if (data == null) data = Buffer.alloc(0);\n    // if data is not buffer be make buffer from it\n    if (!Buffer.isBuffer(data)) data = Buffer.from(data.toString());\n    // 2. We Initialize and generate encrypting function\n    const encrypter = make_encrypter(pwd);\n    // 3. generate salt (12-bytes of random data)\n    const salt = config.genSalt();\n    salt[11] = header.crc >>> 24 & 0xff;\n    // old implementations (before PKZip 2.04g) used two byte check\n    if (oldlike) salt[10] = header.crc >>> 16 & 0xff;\n    // 4. create output\n    const result = Buffer.alloc(data.length + 12);\n    encrypter(salt, result);\n    // finally encode content\n    return encrypter(data, result, 12);\n}\nmodule.exports = {\n    decrypt,\n    encrypt,\n    _salter\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/adm-zip/methods/zipcrypto.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/adm-zip/util/constants.js":
/*!************************************************!*\
  !*** ./node_modules/adm-zip/util/constants.js ***!
  \************************************************/
/***/ ((module) => {

"use strict";
eval("\nmodule.exports = {\n    /* The local file header */ LOCHDR: 30,\n    LOCSIG: 0x04034b50,\n    LOCVER: 4,\n    LOCFLG: 6,\n    LOCHOW: 8,\n    LOCTIM: 10,\n    LOCCRC: 14,\n    LOCSIZ: 18,\n    LOCLEN: 22,\n    LOCNAM: 26,\n    LOCEXT: 28,\n    /* The Data descriptor */ EXTSIG: 0x08074b50,\n    EXTHDR: 16,\n    EXTCRC: 4,\n    EXTSIZ: 8,\n    EXTLEN: 12,\n    /* The central directory file header */ CENHDR: 46,\n    CENSIG: 0x02014b50,\n    CENVEM: 4,\n    CENVER: 6,\n    CENFLG: 8,\n    CENHOW: 10,\n    CENTIM: 12,\n    CENCRC: 16,\n    CENSIZ: 20,\n    CENLEN: 24,\n    CENNAM: 28,\n    CENEXT: 30,\n    CENCOM: 32,\n    CENDSK: 34,\n    CENATT: 36,\n    CENATX: 38,\n    CENOFF: 42,\n    /* The entries in the end of central directory */ ENDHDR: 22,\n    ENDSIG: 0x06054b50,\n    ENDSUB: 8,\n    ENDTOT: 10,\n    ENDSIZ: 12,\n    ENDOFF: 16,\n    ENDCOM: 20,\n    END64HDR: 20,\n    END64SIG: 0x07064b50,\n    END64START: 4,\n    END64OFF: 8,\n    END64NUMDISKS: 16,\n    ZIP64SIG: 0x06064b50,\n    ZIP64HDR: 56,\n    ZIP64LEAD: 12,\n    ZIP64SIZE: 4,\n    ZIP64VEM: 12,\n    ZIP64VER: 14,\n    ZIP64DSK: 16,\n    ZIP64DSKDIR: 20,\n    ZIP64SUB: 24,\n    ZIP64TOT: 32,\n    ZIP64SIZB: 40,\n    ZIP64OFF: 48,\n    ZIP64EXTRA: 56,\n    /* Compression methods */ STORED: 0,\n    SHRUNK: 1,\n    REDUCED1: 2,\n    REDUCED2: 3,\n    REDUCED3: 4,\n    REDUCED4: 5,\n    IMPLODED: 6,\n    // 7 reserved for Tokenizing compression algorithm\n    DEFLATED: 8,\n    ENHANCED_DEFLATED: 9,\n    PKWARE: 10,\n    // 11 reserved by PKWARE\n    BZIP2: 12,\n    // 13 reserved by PKWARE\n    LZMA: 14,\n    // 15-17 reserved by PKWARE\n    IBM_TERSE: 18,\n    IBM_LZ77: 19,\n    AES_ENCRYPT: 99,\n    /* General purpose bit flag */ // values can obtained with expression 2**bitnr\n    FLG_ENC: 1,\n    FLG_COMP1: 2,\n    FLG_COMP2: 4,\n    FLG_DESC: 8,\n    FLG_ENH: 16,\n    FLG_PATCH: 32,\n    FLG_STR: 64,\n    // Bits 7-10: Currently unused.\n    FLG_EFS: 2048,\n    // Bit 12: Reserved by PKWARE for enhanced compression.\n    // Bit 13: encrypted the Central Directory (patented).\n    // Bits 14-15: Reserved by PKWARE.\n    FLG_MSK: 4096,\n    /* Load type */ FILE: 2,\n    BUFFER: 1,\n    NONE: 0,\n    /* 4.5 Extensible data fields */ EF_ID: 0,\n    EF_SIZE: 2,\n    /* Header IDs */ ID_ZIP64: 0x0001,\n    ID_AVINFO: 0x0007,\n    ID_PFS: 0x0008,\n    ID_OS2: 0x0009,\n    ID_NTFS: 0x000a,\n    ID_OPENVMS: 0x000c,\n    ID_UNIX: 0x000d,\n    ID_FORK: 0x000e,\n    ID_PATCH: 0x000f,\n    ID_X509_PKCS7: 0x0014,\n    ID_X509_CERTID_F: 0x0015,\n    ID_X509_CERTID_C: 0x0016,\n    ID_STRONGENC: 0x0017,\n    ID_RECORD_MGT: 0x0018,\n    ID_X509_PKCS7_RL: 0x0019,\n    ID_IBM1: 0x0065,\n    ID_IBM2: 0x0066,\n    ID_POSZIP: 0x4690,\n    EF_ZIP64_OR_32: 0xffffffff,\n    EF_ZIP64_OR_16: 0xffff,\n    EF_ZIP64_SUNCOMP: 0,\n    EF_ZIP64_SCOMP: 8,\n    EF_ZIP64_RHO: 16,\n    EF_ZIP64_DSN: 24\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/adm-zip/util/constants.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/adm-zip/util/errors.js":
/*!*********************************************!*\
  !*** ./node_modules/adm-zip/util/errors.js ***!
  \*********************************************/
/***/ ((module) => {

"use strict";
eval("\nmodule.exports = {\n    /* Header error messages */ INVALID_LOC: \"Invalid LOC header (bad signature)\",\n    INVALID_CEN: \"Invalid CEN header (bad signature)\",\n    INVALID_END: \"Invalid END header (bad signature)\",\n    /* ZipEntry error messages*/ NO_DATA: \"Nothing to decompress\",\n    BAD_CRC: \"CRC32 checksum failed\",\n    FILE_IN_THE_WAY: \"There is a file in the way: %s\",\n    UNKNOWN_METHOD: \"Invalid/unsupported compression method\",\n    /* Inflater error messages */ AVAIL_DATA: \"inflate::Available inflate data did not terminate\",\n    INVALID_DISTANCE: \"inflate::Invalid literal/length or distance code in fixed or dynamic block\",\n    TO_MANY_CODES: \"inflate::Dynamic block code description: too many length or distance codes\",\n    INVALID_REPEAT_LEN: \"inflate::Dynamic block code description: repeat more than specified lengths\",\n    INVALID_REPEAT_FIRST: \"inflate::Dynamic block code description: repeat lengths with no first length\",\n    INCOMPLETE_CODES: \"inflate::Dynamic block code description: code lengths codes incomplete\",\n    INVALID_DYN_DISTANCE: \"inflate::Dynamic block code description: invalid distance code lengths\",\n    INVALID_CODES_LEN: \"inflate::Dynamic block code description: invalid literal/length code lengths\",\n    INVALID_STORE_BLOCK: \"inflate::Stored block length did not match one's complement\",\n    INVALID_BLOCK_TYPE: \"inflate::Invalid block type (type == 3)\",\n    /* ADM-ZIP error messages */ CANT_EXTRACT_FILE: \"Could not extract the file\",\n    CANT_OVERRIDE: \"Target file already exists\",\n    NO_ZIP: \"No zip file was loaded\",\n    NO_ENTRY: \"Entry doesn't exist\",\n    DIRECTORY_CONTENT_ERROR: \"A directory cannot have content\",\n    FILE_NOT_FOUND: \"File not found: %s\",\n    NOT_IMPLEMENTED: \"Not implemented\",\n    INVALID_FILENAME: \"Invalid filename\",\n    INVALID_FORMAT: \"Invalid or unsupported zip format. No END header found\"\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYWRtLXppcC91dGlsL2Vycm9ycy5qcyIsIm1hcHBpbmdzIjoiO0FBQUFBLE9BQU9DLE9BQU8sR0FBRztJQUNiLHlCQUF5QixHQUN6QkMsYUFBYTtJQUNiQyxhQUFhO0lBQ2JDLGFBQWE7SUFFYiwwQkFBMEIsR0FDMUJDLFNBQVM7SUFDVEMsU0FBUztJQUNUQyxpQkFBaUI7SUFDakJDLGdCQUFnQjtJQUVoQiwyQkFBMkIsR0FDM0JDLFlBQVk7SUFDWkMsa0JBQWtCO0lBQ2xCQyxlQUFlO0lBQ2ZDLG9CQUFvQjtJQUNwQkMsc0JBQXNCO0lBQ3RCQyxrQkFBa0I7SUFDbEJDLHNCQUFzQjtJQUN0QkMsbUJBQW1CO0lBQ25CQyxxQkFBcUI7SUFDckJDLG9CQUFvQjtJQUVwQiwwQkFBMEIsR0FDMUJDLG1CQUFtQjtJQUNuQkMsZUFBZTtJQUNmQyxRQUFRO0lBQ1JDLFVBQVU7SUFDVkMseUJBQXlCO0lBQ3pCQyxnQkFBZ0I7SUFDaEJDLGlCQUFpQjtJQUNqQkMsa0JBQWtCO0lBQ2xCQyxnQkFBZ0I7QUFDcEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25kYXlBc3Npc3RhbnQvLi9ub2RlX21vZHVsZXMvYWRtLXppcC91dGlsL2Vycm9ycy5qcz8yOWNhIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0ge1xuICAgIC8qIEhlYWRlciBlcnJvciBtZXNzYWdlcyAqL1xuICAgIElOVkFMSURfTE9DOiBcIkludmFsaWQgTE9DIGhlYWRlciAoYmFkIHNpZ25hdHVyZSlcIixcbiAgICBJTlZBTElEX0NFTjogXCJJbnZhbGlkIENFTiBoZWFkZXIgKGJhZCBzaWduYXR1cmUpXCIsXG4gICAgSU5WQUxJRF9FTkQ6IFwiSW52YWxpZCBFTkQgaGVhZGVyIChiYWQgc2lnbmF0dXJlKVwiLFxuXG4gICAgLyogWmlwRW50cnkgZXJyb3IgbWVzc2FnZXMqL1xuICAgIE5PX0RBVEE6IFwiTm90aGluZyB0byBkZWNvbXByZXNzXCIsXG4gICAgQkFEX0NSQzogXCJDUkMzMiBjaGVja3N1bSBmYWlsZWRcIixcbiAgICBGSUxFX0lOX1RIRV9XQVk6IFwiVGhlcmUgaXMgYSBmaWxlIGluIHRoZSB3YXk6ICVzXCIsXG4gICAgVU5LTk9XTl9NRVRIT0Q6IFwiSW52YWxpZC91bnN1cHBvcnRlZCBjb21wcmVzc2lvbiBtZXRob2RcIixcblxuICAgIC8qIEluZmxhdGVyIGVycm9yIG1lc3NhZ2VzICovXG4gICAgQVZBSUxfREFUQTogXCJpbmZsYXRlOjpBdmFpbGFibGUgaW5mbGF0ZSBkYXRhIGRpZCBub3QgdGVybWluYXRlXCIsXG4gICAgSU5WQUxJRF9ESVNUQU5DRTogXCJpbmZsYXRlOjpJbnZhbGlkIGxpdGVyYWwvbGVuZ3RoIG9yIGRpc3RhbmNlIGNvZGUgaW4gZml4ZWQgb3IgZHluYW1pYyBibG9ja1wiLFxuICAgIFRPX01BTllfQ09ERVM6IFwiaW5mbGF0ZTo6RHluYW1pYyBibG9jayBjb2RlIGRlc2NyaXB0aW9uOiB0b28gbWFueSBsZW5ndGggb3IgZGlzdGFuY2UgY29kZXNcIixcbiAgICBJTlZBTElEX1JFUEVBVF9MRU46IFwiaW5mbGF0ZTo6RHluYW1pYyBibG9jayBjb2RlIGRlc2NyaXB0aW9uOiByZXBlYXQgbW9yZSB0aGFuIHNwZWNpZmllZCBsZW5ndGhzXCIsXG4gICAgSU5WQUxJRF9SRVBFQVRfRklSU1Q6IFwiaW5mbGF0ZTo6RHluYW1pYyBibG9jayBjb2RlIGRlc2NyaXB0aW9uOiByZXBlYXQgbGVuZ3RocyB3aXRoIG5vIGZpcnN0IGxlbmd0aFwiLFxuICAgIElOQ09NUExFVEVfQ09ERVM6IFwiaW5mbGF0ZTo6RHluYW1pYyBibG9jayBjb2RlIGRlc2NyaXB0aW9uOiBjb2RlIGxlbmd0aHMgY29kZXMgaW5jb21wbGV0ZVwiLFxuICAgIElOVkFMSURfRFlOX0RJU1RBTkNFOiBcImluZmxhdGU6OkR5bmFtaWMgYmxvY2sgY29kZSBkZXNjcmlwdGlvbjogaW52YWxpZCBkaXN0YW5jZSBjb2RlIGxlbmd0aHNcIixcbiAgICBJTlZBTElEX0NPREVTX0xFTjogXCJpbmZsYXRlOjpEeW5hbWljIGJsb2NrIGNvZGUgZGVzY3JpcHRpb246IGludmFsaWQgbGl0ZXJhbC9sZW5ndGggY29kZSBsZW5ndGhzXCIsXG4gICAgSU5WQUxJRF9TVE9SRV9CTE9DSzogXCJpbmZsYXRlOjpTdG9yZWQgYmxvY2sgbGVuZ3RoIGRpZCBub3QgbWF0Y2ggb25lJ3MgY29tcGxlbWVudFwiLFxuICAgIElOVkFMSURfQkxPQ0tfVFlQRTogXCJpbmZsYXRlOjpJbnZhbGlkIGJsb2NrIHR5cGUgKHR5cGUgPT0gMylcIixcblxuICAgIC8qIEFETS1aSVAgZXJyb3IgbWVzc2FnZXMgKi9cbiAgICBDQU5UX0VYVFJBQ1RfRklMRTogXCJDb3VsZCBub3QgZXh0cmFjdCB0aGUgZmlsZVwiLFxuICAgIENBTlRfT1ZFUlJJREU6IFwiVGFyZ2V0IGZpbGUgYWxyZWFkeSBleGlzdHNcIixcbiAgICBOT19aSVA6IFwiTm8gemlwIGZpbGUgd2FzIGxvYWRlZFwiLFxuICAgIE5PX0VOVFJZOiBcIkVudHJ5IGRvZXNuJ3QgZXhpc3RcIixcbiAgICBESVJFQ1RPUllfQ09OVEVOVF9FUlJPUjogXCJBIGRpcmVjdG9yeSBjYW5ub3QgaGF2ZSBjb250ZW50XCIsXG4gICAgRklMRV9OT1RfRk9VTkQ6IFwiRmlsZSBub3QgZm91bmQ6ICVzXCIsXG4gICAgTk9UX0lNUExFTUVOVEVEOiBcIk5vdCBpbXBsZW1lbnRlZFwiLFxuICAgIElOVkFMSURfRklMRU5BTUU6IFwiSW52YWxpZCBmaWxlbmFtZVwiLFxuICAgIElOVkFMSURfRk9STUFUOiBcIkludmFsaWQgb3IgdW5zdXBwb3J0ZWQgemlwIGZvcm1hdC4gTm8gRU5EIGhlYWRlciBmb3VuZFwiXG59O1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJJTlZBTElEX0xPQyIsIklOVkFMSURfQ0VOIiwiSU5WQUxJRF9FTkQiLCJOT19EQVRBIiwiQkFEX0NSQyIsIkZJTEVfSU5fVEhFX1dBWSIsIlVOS05PV05fTUVUSE9EIiwiQVZBSUxfREFUQSIsIklOVkFMSURfRElTVEFOQ0UiLCJUT19NQU5ZX0NPREVTIiwiSU5WQUxJRF9SRVBFQVRfTEVOIiwiSU5WQUxJRF9SRVBFQVRfRklSU1QiLCJJTkNPTVBMRVRFX0NPREVTIiwiSU5WQUxJRF9EWU5fRElTVEFOQ0UiLCJJTlZBTElEX0NPREVTX0xFTiIsIklOVkFMSURfU1RPUkVfQkxPQ0siLCJJTlZBTElEX0JMT0NLX1RZUEUiLCJDQU5UX0VYVFJBQ1RfRklMRSIsIkNBTlRfT1ZFUlJJREUiLCJOT19aSVAiLCJOT19FTlRSWSIsIkRJUkVDVE9SWV9DT05URU5UX0VSUk9SIiwiRklMRV9OT1RfRk9VTkQiLCJOT1RfSU1QTEVNRU5URUQiLCJJTlZBTElEX0ZJTEVOQU1FIiwiSU5WQUxJRF9GT1JNQVQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/adm-zip/util/errors.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/adm-zip/util/fattr.js":
/*!********************************************!*\
  !*** ./node_modules/adm-zip/util/fattr.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst fs = (__webpack_require__(/*! ./fileSystem */ \"(rsc)/./node_modules/adm-zip/util/fileSystem.js\").require)();\nconst pth = __webpack_require__(/*! path */ \"path\");\nfs.existsSync = fs.existsSync || pth.existsSync;\nmodule.exports = function(/*String*/ path) {\n    var _path = path || \"\", _obj = newAttr(), _stat = null;\n    function newAttr() {\n        return {\n            directory: false,\n            readonly: false,\n            hidden: false,\n            executable: false,\n            mtime: 0,\n            atime: 0\n        };\n    }\n    if (_path && fs.existsSync(_path)) {\n        _stat = fs.statSync(_path);\n        _obj.directory = _stat.isDirectory();\n        _obj.mtime = _stat.mtime;\n        _obj.atime = _stat.atime;\n        _obj.executable = (73 & _stat.mode) !== 0; // file is executable who ever har right not just owner\n        _obj.readonly = (128 & _stat.mode) === 0; // readonly if owner has no write right\n        _obj.hidden = pth.basename(_path)[0] === \".\";\n    } else {\n        console.warn(\"Invalid path: \" + _path);\n    }\n    return {\n        get directory () {\n            return _obj.directory;\n        },\n        get readOnly () {\n            return _obj.readonly;\n        },\n        get hidden () {\n            return _obj.hidden;\n        },\n        get mtime () {\n            return _obj.mtime;\n        },\n        get atime () {\n            return _obj.atime;\n        },\n        get executable () {\n            return _obj.executable;\n        },\n        decodeAttributes: function() {},\n        encodeAttributes: function() {},\n        toJSON: function() {\n            return {\n                path: _path,\n                isDirectory: _obj.directory,\n                isReadOnly: _obj.readonly,\n                isHidden: _obj.hidden,\n                isExecutable: _obj.executable,\n                mTime: _obj.mtime,\n                aTime: _obj.atime\n            };\n        },\n        toString: function() {\n            return JSON.stringify(this.toJSON(), null, \"\t\");\n        }\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYWRtLXppcC91dGlsL2ZhdHRyLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxNQUFNQSxLQUFLQyxvR0FBK0I7QUFDMUMsTUFBTUMsTUFBTUQsbUJBQU9BLENBQUMsa0JBQU07QUFFMUJELEdBQUdHLFVBQVUsR0FBR0gsR0FBR0csVUFBVSxJQUFJRCxJQUFJQyxVQUFVO0FBRS9DQyxPQUFPQyxPQUFPLEdBQUcsU0FBVSxRQUFRLEdBQUdDLElBQUk7SUFDdEMsSUFBSUMsUUFBUUQsUUFBUSxJQUNoQkUsT0FBT0MsV0FDUEMsUUFBUTtJQUVaLFNBQVNEO1FBQ0wsT0FBTztZQUNIRSxXQUFXO1lBQ1hDLFVBQVU7WUFDVkMsUUFBUTtZQUNSQyxZQUFZO1lBQ1pDLE9BQU87WUFDUEMsT0FBTztRQUNYO0lBQ0o7SUFFQSxJQUFJVCxTQUFTUCxHQUFHRyxVQUFVLENBQUNJLFFBQVE7UUFDL0JHLFFBQVFWLEdBQUdpQixRQUFRLENBQUNWO1FBQ3BCQyxLQUFLRyxTQUFTLEdBQUdELE1BQU1RLFdBQVc7UUFDbENWLEtBQUtPLEtBQUssR0FBR0wsTUFBTUssS0FBSztRQUN4QlAsS0FBS1EsS0FBSyxHQUFHTixNQUFNTSxLQUFLO1FBQ3hCUixLQUFLTSxVQUFVLEdBQUcsQ0FBQyxLQUFRSixNQUFNUyxJQUFJLE1BQU0sR0FBRyx1REFBdUQ7UUFDckdYLEtBQUtJLFFBQVEsR0FBRyxDQUFDLE1BQVFGLE1BQU1TLElBQUksTUFBTSxHQUFHLHVDQUF1QztRQUNuRlgsS0FBS0ssTUFBTSxHQUFHWCxJQUFJa0IsUUFBUSxDQUFDYixNQUFNLENBQUMsRUFBRSxLQUFLO0lBQzdDLE9BQU87UUFDSGMsUUFBUUMsSUFBSSxDQUFDLG1CQUFtQmY7SUFDcEM7SUFFQSxPQUFPO1FBQ0gsSUFBSUksYUFBWTtZQUNaLE9BQU9ILEtBQUtHLFNBQVM7UUFDekI7UUFFQSxJQUFJWSxZQUFXO1lBQ1gsT0FBT2YsS0FBS0ksUUFBUTtRQUN4QjtRQUVBLElBQUlDLFVBQVM7WUFDVCxPQUFPTCxLQUFLSyxNQUFNO1FBQ3RCO1FBRUEsSUFBSUUsU0FBUTtZQUNSLE9BQU9QLEtBQUtPLEtBQUs7UUFDckI7UUFFQSxJQUFJQyxTQUFRO1lBQ1IsT0FBT1IsS0FBS1EsS0FBSztRQUNyQjtRQUVBLElBQUlGLGNBQWE7WUFDYixPQUFPTixLQUFLTSxVQUFVO1FBQzFCO1FBRUFVLGtCQUFrQixZQUFhO1FBRS9CQyxrQkFBa0IsWUFBYTtRQUUvQkMsUUFBUTtZQUNKLE9BQU87Z0JBQ0hwQixNQUFNQztnQkFDTlcsYUFBYVYsS0FBS0csU0FBUztnQkFDM0JnQixZQUFZbkIsS0FBS0ksUUFBUTtnQkFDekJnQixVQUFVcEIsS0FBS0ssTUFBTTtnQkFDckJnQixjQUFjckIsS0FBS00sVUFBVTtnQkFDN0JnQixPQUFPdEIsS0FBS08sS0FBSztnQkFDakJnQixPQUFPdkIsS0FBS1EsS0FBSztZQUNyQjtRQUNKO1FBRUFnQixVQUFVO1lBQ04sT0FBT0MsS0FBS0MsU0FBUyxDQUFDLElBQUksQ0FBQ1IsTUFBTSxJQUFJLE1BQU07UUFDL0M7SUFDSjtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbW9uZGF5QXNzaXN0YW50Ly4vbm9kZV9tb2R1bGVzL2FkbS16aXAvdXRpbC9mYXR0ci5qcz9jOWUzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGZzID0gcmVxdWlyZShcIi4vZmlsZVN5c3RlbVwiKS5yZXF1aXJlKCk7XG5jb25zdCBwdGggPSByZXF1aXJlKFwicGF0aFwiKTtcblxuZnMuZXhpc3RzU3luYyA9IGZzLmV4aXN0c1N5bmMgfHwgcHRoLmV4aXN0c1N5bmM7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKC8qU3RyaW5nKi8gcGF0aCkge1xuICAgIHZhciBfcGF0aCA9IHBhdGggfHwgXCJcIixcbiAgICAgICAgX29iaiA9IG5ld0F0dHIoKSxcbiAgICAgICAgX3N0YXQgPSBudWxsO1xuXG4gICAgZnVuY3Rpb24gbmV3QXR0cigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRpcmVjdG9yeTogZmFsc2UsXG4gICAgICAgICAgICByZWFkb25seTogZmFsc2UsXG4gICAgICAgICAgICBoaWRkZW46IGZhbHNlLFxuICAgICAgICAgICAgZXhlY3V0YWJsZTogZmFsc2UsXG4gICAgICAgICAgICBtdGltZTogMCxcbiAgICAgICAgICAgIGF0aW1lOiAwXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKF9wYXRoICYmIGZzLmV4aXN0c1N5bmMoX3BhdGgpKSB7XG4gICAgICAgIF9zdGF0ID0gZnMuc3RhdFN5bmMoX3BhdGgpO1xuICAgICAgICBfb2JqLmRpcmVjdG9yeSA9IF9zdGF0LmlzRGlyZWN0b3J5KCk7XG4gICAgICAgIF9vYmoubXRpbWUgPSBfc3RhdC5tdGltZTtcbiAgICAgICAgX29iai5hdGltZSA9IF9zdGF0LmF0aW1lO1xuICAgICAgICBfb2JqLmV4ZWN1dGFibGUgPSAoMG8xMTEgJiBfc3RhdC5tb2RlKSAhPT0gMDsgLy8gZmlsZSBpcyBleGVjdXRhYmxlIHdobyBldmVyIGhhciByaWdodCBub3QganVzdCBvd25lclxuICAgICAgICBfb2JqLnJlYWRvbmx5ID0gKDBvMjAwICYgX3N0YXQubW9kZSkgPT09IDA7IC8vIHJlYWRvbmx5IGlmIG93bmVyIGhhcyBubyB3cml0ZSByaWdodFxuICAgICAgICBfb2JqLmhpZGRlbiA9IHB0aC5iYXNlbmFtZShfcGF0aClbMF0gPT09IFwiLlwiO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcIkludmFsaWQgcGF0aDogXCIgKyBfcGF0aCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgZ2V0IGRpcmVjdG9yeSgpIHtcbiAgICAgICAgICAgIHJldHVybiBfb2JqLmRpcmVjdG9yeTtcbiAgICAgICAgfSxcblxuICAgICAgICBnZXQgcmVhZE9ubHkoKSB7XG4gICAgICAgICAgICByZXR1cm4gX29iai5yZWFkb25seTtcbiAgICAgICAgfSxcblxuICAgICAgICBnZXQgaGlkZGVuKCkge1xuICAgICAgICAgICAgcmV0dXJuIF9vYmouaGlkZGVuO1xuICAgICAgICB9LFxuXG4gICAgICAgIGdldCBtdGltZSgpIHtcbiAgICAgICAgICAgIHJldHVybiBfb2JqLm10aW1lO1xuICAgICAgICB9LFxuXG4gICAgICAgIGdldCBhdGltZSgpIHtcbiAgICAgICAgICAgIHJldHVybiBfb2JqLmF0aW1lO1xuICAgICAgICB9LFxuXG4gICAgICAgIGdldCBleGVjdXRhYmxlKCkge1xuICAgICAgICAgICAgcmV0dXJuIF9vYmouZXhlY3V0YWJsZTtcbiAgICAgICAgfSxcblxuICAgICAgICBkZWNvZGVBdHRyaWJ1dGVzOiBmdW5jdGlvbiAoKSB7fSxcblxuICAgICAgICBlbmNvZGVBdHRyaWJ1dGVzOiBmdW5jdGlvbiAoKSB7fSxcblxuICAgICAgICB0b0pTT046IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgcGF0aDogX3BhdGgsXG4gICAgICAgICAgICAgICAgaXNEaXJlY3Rvcnk6IF9vYmouZGlyZWN0b3J5LFxuICAgICAgICAgICAgICAgIGlzUmVhZE9ubHk6IF9vYmoucmVhZG9ubHksXG4gICAgICAgICAgICAgICAgaXNIaWRkZW46IF9vYmouaGlkZGVuLFxuICAgICAgICAgICAgICAgIGlzRXhlY3V0YWJsZTogX29iai5leGVjdXRhYmxlLFxuICAgICAgICAgICAgICAgIG1UaW1lOiBfb2JqLm10aW1lLFxuICAgICAgICAgICAgICAgIGFUaW1lOiBfb2JqLmF0aW1lXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuXG4gICAgICAgIHRvU3RyaW5nOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodGhpcy50b0pTT04oKSwgbnVsbCwgXCJcXHRcIik7XG4gICAgICAgIH1cbiAgICB9O1xufTtcbiJdLCJuYW1lcyI6WyJmcyIsInJlcXVpcmUiLCJwdGgiLCJleGlzdHNTeW5jIiwibW9kdWxlIiwiZXhwb3J0cyIsInBhdGgiLCJfcGF0aCIsIl9vYmoiLCJuZXdBdHRyIiwiX3N0YXQiLCJkaXJlY3RvcnkiLCJyZWFkb25seSIsImhpZGRlbiIsImV4ZWN1dGFibGUiLCJtdGltZSIsImF0aW1lIiwic3RhdFN5bmMiLCJpc0RpcmVjdG9yeSIsIm1vZGUiLCJiYXNlbmFtZSIsImNvbnNvbGUiLCJ3YXJuIiwicmVhZE9ubHkiLCJkZWNvZGVBdHRyaWJ1dGVzIiwiZW5jb2RlQXR0cmlidXRlcyIsInRvSlNPTiIsImlzUmVhZE9ubHkiLCJpc0hpZGRlbiIsImlzRXhlY3V0YWJsZSIsIm1UaW1lIiwiYVRpbWUiLCJ0b1N0cmluZyIsIkpTT04iLCJzdHJpbmdpZnkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/adm-zip/util/fattr.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/adm-zip/util/fileSystem.js":
/*!*************************************************!*\
  !*** ./node_modules/adm-zip/util/fileSystem.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("exports.require = function() {\n    if (typeof process === \"object\" && process.versions && process.versions[\"electron\"]) {\n        try {\n            const originalFs = __webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'original-fs'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\n            if (Object.keys(originalFs).length > 0) {\n                return originalFs;\n            }\n        } catch (e) {}\n    }\n    return __webpack_require__(/*! fs */ \"fs\");\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYWRtLXppcC91dGlsL2ZpbGVTeXN0ZW0uanMiLCJtYXBwaW5ncyI6IkFBQUFBLGVBQWUsR0FBRztJQUNkLElBQUksT0FBT0UsWUFBWSxZQUFZQSxRQUFRQyxRQUFRLElBQUlELFFBQVFDLFFBQVEsQ0FBQyxXQUFXLEVBQUU7UUFDakYsSUFBSTtZQUNBLE1BQU1DLGFBQWFILG1CQUFPQSxDQUFDLDBJQUFhO1lBQ3hDLElBQUlJLE9BQU9DLElBQUksQ0FBQ0YsWUFBWUcsTUFBTSxHQUFHLEdBQUc7Z0JBQ3BDLE9BQU9IO1lBQ1g7UUFDSixFQUFFLE9BQU9JLEdBQUcsQ0FBQztJQUNqQjtJQUNBLE9BQU9QLG1CQUFPQSxDQUFDLGNBQUk7QUFDdkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25kYXlBc3Npc3RhbnQvLi9ub2RlX21vZHVsZXMvYWRtLXppcC91dGlsL2ZpbGVTeXN0ZW0uanM/YzNmYSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnRzLnJlcXVpcmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHR5cGVvZiBwcm9jZXNzID09PSBcIm9iamVjdFwiICYmIHByb2Nlc3MudmVyc2lvbnMgJiYgcHJvY2Vzcy52ZXJzaW9uc1tcImVsZWN0cm9uXCJdKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBvcmlnaW5hbEZzID0gcmVxdWlyZShcIm9yaWdpbmFsLWZzXCIpO1xuICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzKG9yaWdpbmFsRnMpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb3JpZ2luYWxGcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICB9XG4gICAgcmV0dXJuIHJlcXVpcmUoXCJmc1wiKTtcbn07XG4iXSwibmFtZXMiOlsiZXhwb3J0cyIsInJlcXVpcmUiLCJwcm9jZXNzIiwidmVyc2lvbnMiLCJvcmlnaW5hbEZzIiwiT2JqZWN0Iiwia2V5cyIsImxlbmd0aCIsImUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/adm-zip/util/fileSystem.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/adm-zip/util/index.js":
/*!********************************************!*\
  !*** ./node_modules/adm-zip/util/index.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nmodule.exports = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/adm-zip/util/utils.js\");\nmodule.exports.Constants = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/adm-zip/util/constants.js\");\nmodule.exports.Errors = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/adm-zip/util/errors.js\");\nmodule.exports.FileAttr = __webpack_require__(/*! ./fattr */ \"(rsc)/./node_modules/adm-zip/util/fattr.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYWRtLXppcC91dGlsL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7QUFBQUEsaUdBQW1DO0FBQ25DQSxtSEFBaUQ7QUFDakRBLDBHQUEyQztBQUMzQ0EsMEdBQTRDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbW9uZGF5QXNzaXN0YW50Ly4vbm9kZV9tb2R1bGVzL2FkbS16aXAvdXRpbC9pbmRleC5qcz8wODI1Il0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG5tb2R1bGUuZXhwb3J0cy5Db25zdGFudHMgPSByZXF1aXJlKFwiLi9jb25zdGFudHNcIik7XG5tb2R1bGUuZXhwb3J0cy5FcnJvcnMgPSByZXF1aXJlKFwiLi9lcnJvcnNcIik7XG5tb2R1bGUuZXhwb3J0cy5GaWxlQXR0ciA9IHJlcXVpcmUoXCIuL2ZhdHRyXCIpO1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJyZXF1aXJlIiwiQ29uc3RhbnRzIiwiRXJyb3JzIiwiRmlsZUF0dHIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/adm-zip/util/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/adm-zip/util/utils.js":
/*!********************************************!*\
  !*** ./node_modules/adm-zip/util/utils.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst fsystem = (__webpack_require__(/*! ./fileSystem */ \"(rsc)/./node_modules/adm-zip/util/fileSystem.js\").require)();\nconst pth = __webpack_require__(/*! path */ \"path\");\nconst Constants = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/adm-zip/util/constants.js\");\nconst Errors = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/adm-zip/util/errors.js\");\nconst isWin = typeof process === \"object\" && \"win32\" === process.platform;\nconst is_Obj = (obj)=>obj && typeof obj === \"object\";\n// generate CRC32 lookup table\nconst crcTable = new Uint32Array(256).map((t, c)=>{\n    for(let k = 0; k < 8; k++){\n        if ((c & 1) !== 0) {\n            c = 0xedb88320 ^ c >>> 1;\n        } else {\n            c >>>= 1;\n        }\n    }\n    return c >>> 0;\n});\n// UTILS functions\nfunction Utils(opts) {\n    this.sep = pth.sep;\n    this.fs = fsystem;\n    if (is_Obj(opts)) {\n        // custom filesystem\n        if (is_Obj(opts.fs) && typeof opts.fs.statSync === \"function\") {\n            this.fs = opts.fs;\n        }\n    }\n}\nmodule.exports = Utils;\n// INSTANCED functions\nUtils.prototype.makeDir = function(/*String*/ folder) {\n    const self = this;\n    // Sync - make directories tree\n    function mkdirSync(/*String*/ fpath) {\n        let resolvedPath = fpath.split(self.sep)[0];\n        fpath.split(self.sep).forEach(function(name) {\n            if (!name || name.substr(-1, 1) === \":\") return;\n            resolvedPath += self.sep + name;\n            var stat;\n            try {\n                stat = self.fs.statSync(resolvedPath);\n            } catch (e) {\n                self.fs.mkdirSync(resolvedPath);\n            }\n            if (stat && stat.isFile()) throw Errors.FILE_IN_THE_WAY.replace(\"%s\", resolvedPath);\n        });\n    }\n    mkdirSync(folder);\n};\nUtils.prototype.writeFileTo = function(/*String*/ path, /*Buffer*/ content, /*Boolean*/ overwrite, /*Number*/ attr) {\n    const self = this;\n    if (self.fs.existsSync(path)) {\n        if (!overwrite) return false; // cannot overwrite\n        var stat = self.fs.statSync(path);\n        if (stat.isDirectory()) {\n            return false;\n        }\n    }\n    var folder = pth.dirname(path);\n    if (!self.fs.existsSync(folder)) {\n        self.makeDir(folder);\n    }\n    var fd;\n    try {\n        fd = self.fs.openSync(path, \"w\", 438); // 0666\n    } catch (e) {\n        self.fs.chmodSync(path, 438);\n        fd = self.fs.openSync(path, \"w\", 438);\n    }\n    if (fd) {\n        try {\n            self.fs.writeSync(fd, content, 0, content.length, 0);\n        } finally{\n            self.fs.closeSync(fd);\n        }\n    }\n    self.fs.chmodSync(path, attr || 438);\n    return true;\n};\nUtils.prototype.writeFileToAsync = function(/*String*/ path, /*Buffer*/ content, /*Boolean*/ overwrite, /*Number*/ attr, /*Function*/ callback) {\n    if (typeof attr === \"function\") {\n        callback = attr;\n        attr = undefined;\n    }\n    const self = this;\n    self.fs.exists(path, function(exist) {\n        if (exist && !overwrite) return callback(false);\n        self.fs.stat(path, function(err, stat) {\n            if (exist && stat.isDirectory()) {\n                return callback(false);\n            }\n            var folder = pth.dirname(path);\n            self.fs.exists(folder, function(exists) {\n                if (!exists) self.makeDir(folder);\n                self.fs.open(path, \"w\", 438, function(err, fd) {\n                    if (err) {\n                        self.fs.chmod(path, 438, function() {\n                            self.fs.open(path, \"w\", 438, function(err, fd) {\n                                self.fs.write(fd, content, 0, content.length, 0, function() {\n                                    self.fs.close(fd, function() {\n                                        self.fs.chmod(path, attr || 438, function() {\n                                            callback(true);\n                                        });\n                                    });\n                                });\n                            });\n                        });\n                    } else if (fd) {\n                        self.fs.write(fd, content, 0, content.length, 0, function() {\n                            self.fs.close(fd, function() {\n                                self.fs.chmod(path, attr || 438, function() {\n                                    callback(true);\n                                });\n                            });\n                        });\n                    } else {\n                        self.fs.chmod(path, attr || 438, function() {\n                            callback(true);\n                        });\n                    }\n                });\n            });\n        });\n    });\n};\nUtils.prototype.findFiles = function(/*String*/ path) {\n    const self = this;\n    function findSync(/*String*/ dir, /*RegExp*/ pattern, /*Boolean*/ recursive) {\n        if (typeof pattern === \"boolean\") {\n            recursive = pattern;\n            pattern = undefined;\n        }\n        let files = [];\n        self.fs.readdirSync(dir).forEach(function(file) {\n            var path = pth.join(dir, file);\n            if (self.fs.statSync(path).isDirectory() && recursive) files = files.concat(findSync(path, pattern, recursive));\n            if (!pattern || pattern.test(path)) {\n                files.push(pth.normalize(path) + (self.fs.statSync(path).isDirectory() ? self.sep : \"\"));\n            }\n        });\n        return files;\n    }\n    return findSync(path, undefined, true);\n};\nUtils.prototype.getAttributes = function() {};\nUtils.prototype.setAttributes = function() {};\n// STATIC functions\n// crc32 single update (it is part of crc32)\nUtils.crc32update = function(crc, byte) {\n    return crcTable[(crc ^ byte) & 0xff] ^ crc >>> 8;\n};\nUtils.crc32 = function(buf) {\n    if (typeof buf === \"string\") {\n        buf = Buffer.from(buf, \"utf8\");\n    }\n    // Generate crcTable\n    if (!crcTable.length) genCRCTable();\n    let len = buf.length;\n    let crc = ~0;\n    for(let off = 0; off < len;)crc = Utils.crc32update(crc, buf[off++]);\n    // xor and cast as uint32 number\n    return ~crc >>> 0;\n};\nUtils.methodToString = function(/*Number*/ method) {\n    switch(method){\n        case Constants.STORED:\n            return \"STORED (\" + method + \")\";\n        case Constants.DEFLATED:\n            return \"DEFLATED (\" + method + \")\";\n        default:\n            return \"UNSUPPORTED (\" + method + \")\";\n    }\n};\n// removes \"..\" style path elements\nUtils.canonical = function(/*string*/ path) {\n    if (!path) return \"\";\n    // trick normalize think path is absolute\n    var safeSuffix = pth.posix.normalize(\"/\" + path.split(\"\\\\\").join(\"/\"));\n    return pth.join(\".\", safeSuffix);\n};\n// make abolute paths taking prefix as root folder\nUtils.sanitize = function(/*string*/ prefix, /*string*/ name) {\n    prefix = pth.resolve(pth.normalize(prefix));\n    var parts = name.split(\"/\");\n    for(var i = 0, l = parts.length; i < l; i++){\n        var path = pth.normalize(pth.join(prefix, parts.slice(i, l).join(pth.sep)));\n        if (path.indexOf(prefix) === 0) {\n            return path;\n        }\n    }\n    return pth.normalize(pth.join(prefix, pth.basename(name)));\n};\n// converts buffer, Uint8Array, string types to buffer\nUtils.toBuffer = function toBuffer(/*buffer, Uint8Array, string*/ input) {\n    if (Buffer.isBuffer(input)) {\n        return input;\n    } else if (input instanceof Uint8Array) {\n        return Buffer.from(input);\n    } else {\n        // expect string all other values are invalid and return empty buffer\n        return typeof input === \"string\" ? Buffer.from(input, \"utf8\") : Buffer.alloc(0);\n    }\n};\nUtils.readBigUInt64LE = function(/*Buffer*/ buffer, /*int*/ index) {\n    var slice = Buffer.from(buffer.slice(index, index + 8));\n    slice.swap64();\n    return parseInt(`0x${slice.toString(\"hex\")}`);\n};\nUtils.isWin = isWin; // Do we have windows system\nUtils.crcTable = crcTable;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Q2pEVyxNQUFNTixRQUFRLEdBQUdBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbW9uZGF5QXNzaXN0YW50Ly4vbm9kZV9tb2R1bGVzL2FkbS16aXAvdXRpbC91dGlscy5qcz85OGExIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGZzeXN0ZW0gPSByZXF1aXJlKFwiLi9maWxlU3lzdGVtXCIpLnJlcXVpcmUoKTtcbmNvbnN0IHB0aCA9IHJlcXVpcmUoXCJwYXRoXCIpO1xuY29uc3QgQ29uc3RhbnRzID0gcmVxdWlyZShcIi4vY29uc3RhbnRzXCIpO1xuY29uc3QgRXJyb3JzID0gcmVxdWlyZShcIi4vZXJyb3JzXCIpO1xuY29uc3QgaXNXaW4gPSB0eXBlb2YgcHJvY2VzcyA9PT0gXCJvYmplY3RcIiAmJiBcIndpbjMyXCIgPT09IHByb2Nlc3MucGxhdGZvcm07XG5cbmNvbnN0IGlzX09iaiA9IChvYmopID0+IG9iaiAmJiB0eXBlb2Ygb2JqID09PSBcIm9iamVjdFwiO1xuXG4vLyBnZW5lcmF0ZSBDUkMzMiBsb29rdXAgdGFibGVcbmNvbnN0IGNyY1RhYmxlID0gbmV3IFVpbnQzMkFycmF5KDI1NikubWFwKCh0LCBjKSA9PiB7XG4gICAgZm9yIChsZXQgayA9IDA7IGsgPCA4OyBrKyspIHtcbiAgICAgICAgaWYgKChjICYgMSkgIT09IDApIHtcbiAgICAgICAgICAgIGMgPSAweGVkYjg4MzIwIF4gKGMgPj4+IDEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYyA+Pj49IDE7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGMgPj4+IDA7XG59KTtcblxuLy8gVVRJTFMgZnVuY3Rpb25zXG5cbmZ1bmN0aW9uIFV0aWxzKG9wdHMpIHtcbiAgICB0aGlzLnNlcCA9IHB0aC5zZXA7XG4gICAgdGhpcy5mcyA9IGZzeXN0ZW07XG5cbiAgICBpZiAoaXNfT2JqKG9wdHMpKSB7XG4gICAgICAgIC8vIGN1c3RvbSBmaWxlc3lzdGVtXG4gICAgICAgIGlmIChpc19PYmoob3B0cy5mcykgJiYgdHlwZW9mIG9wdHMuZnMuc3RhdFN5bmMgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgdGhpcy5mcyA9IG9wdHMuZnM7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gVXRpbHM7XG5cbi8vIElOU1RBTkNFRCBmdW5jdGlvbnNcblxuVXRpbHMucHJvdG90eXBlLm1ha2VEaXIgPSBmdW5jdGlvbiAoLypTdHJpbmcqLyBmb2xkZXIpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcblxuICAgIC8vIFN5bmMgLSBtYWtlIGRpcmVjdG9yaWVzIHRyZWVcbiAgICBmdW5jdGlvbiBta2RpclN5bmMoLypTdHJpbmcqLyBmcGF0aCkge1xuICAgICAgICBsZXQgcmVzb2x2ZWRQYXRoID0gZnBhdGguc3BsaXQoc2VsZi5zZXApWzBdO1xuICAgICAgICBmcGF0aC5zcGxpdChzZWxmLnNlcCkuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgICAgaWYgKCFuYW1lIHx8IG5hbWUuc3Vic3RyKC0xLCAxKSA9PT0gXCI6XCIpIHJldHVybjtcbiAgICAgICAgICAgIHJlc29sdmVkUGF0aCArPSBzZWxmLnNlcCArIG5hbWU7XG4gICAgICAgICAgICB2YXIgc3RhdDtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgc3RhdCA9IHNlbGYuZnMuc3RhdFN5bmMocmVzb2x2ZWRQYXRoKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICBzZWxmLmZzLm1rZGlyU3luYyhyZXNvbHZlZFBhdGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHN0YXQgJiYgc3RhdC5pc0ZpbGUoKSkgdGhyb3cgRXJyb3JzLkZJTEVfSU5fVEhFX1dBWS5yZXBsYWNlKFwiJXNcIiwgcmVzb2x2ZWRQYXRoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgbWtkaXJTeW5jKGZvbGRlcik7XG59O1xuXG5VdGlscy5wcm90b3R5cGUud3JpdGVGaWxlVG8gPSBmdW5jdGlvbiAoLypTdHJpbmcqLyBwYXRoLCAvKkJ1ZmZlciovIGNvbnRlbnQsIC8qQm9vbGVhbiovIG92ZXJ3cml0ZSwgLypOdW1iZXIqLyBhdHRyKSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgaWYgKHNlbGYuZnMuZXhpc3RzU3luYyhwYXRoKSkge1xuICAgICAgICBpZiAoIW92ZXJ3cml0ZSkgcmV0dXJuIGZhbHNlOyAvLyBjYW5ub3Qgb3ZlcndyaXRlXG5cbiAgICAgICAgdmFyIHN0YXQgPSBzZWxmLmZzLnN0YXRTeW5jKHBhdGgpO1xuICAgICAgICBpZiAoc3RhdC5pc0RpcmVjdG9yeSgpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdmFyIGZvbGRlciA9IHB0aC5kaXJuYW1lKHBhdGgpO1xuICAgIGlmICghc2VsZi5mcy5leGlzdHNTeW5jKGZvbGRlcikpIHtcbiAgICAgICAgc2VsZi5tYWtlRGlyKGZvbGRlcik7XG4gICAgfVxuXG4gICAgdmFyIGZkO1xuICAgIHRyeSB7XG4gICAgICAgIGZkID0gc2VsZi5mcy5vcGVuU3luYyhwYXRoLCBcIndcIiwgNDM4KTsgLy8gMDY2NlxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgc2VsZi5mcy5jaG1vZFN5bmMocGF0aCwgNDM4KTtcbiAgICAgICAgZmQgPSBzZWxmLmZzLm9wZW5TeW5jKHBhdGgsIFwid1wiLCA0MzgpO1xuICAgIH1cbiAgICBpZiAoZmQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHNlbGYuZnMud3JpdGVTeW5jKGZkLCBjb250ZW50LCAwLCBjb250ZW50Lmxlbmd0aCwgMCk7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICBzZWxmLmZzLmNsb3NlU3luYyhmZCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc2VsZi5mcy5jaG1vZFN5bmMocGF0aCwgYXR0ciB8fCA0MzgpO1xuICAgIHJldHVybiB0cnVlO1xufTtcblxuVXRpbHMucHJvdG90eXBlLndyaXRlRmlsZVRvQXN5bmMgPSBmdW5jdGlvbiAoLypTdHJpbmcqLyBwYXRoLCAvKkJ1ZmZlciovIGNvbnRlbnQsIC8qQm9vbGVhbiovIG92ZXJ3cml0ZSwgLypOdW1iZXIqLyBhdHRyLCAvKkZ1bmN0aW9uKi8gY2FsbGJhY2spIHtcbiAgICBpZiAodHlwZW9mIGF0dHIgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBjYWxsYmFjayA9IGF0dHI7XG4gICAgICAgIGF0dHIgPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG5cbiAgICBzZWxmLmZzLmV4aXN0cyhwYXRoLCBmdW5jdGlvbiAoZXhpc3QpIHtcbiAgICAgICAgaWYgKGV4aXN0ICYmICFvdmVyd3JpdGUpIHJldHVybiBjYWxsYmFjayhmYWxzZSk7XG5cbiAgICAgICAgc2VsZi5mcy5zdGF0KHBhdGgsIGZ1bmN0aW9uIChlcnIsIHN0YXQpIHtcbiAgICAgICAgICAgIGlmIChleGlzdCAmJiBzdGF0LmlzRGlyZWN0b3J5KCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soZmFsc2UpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgZm9sZGVyID0gcHRoLmRpcm5hbWUocGF0aCk7XG4gICAgICAgICAgICBzZWxmLmZzLmV4aXN0cyhmb2xkZXIsIGZ1bmN0aW9uIChleGlzdHMpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWV4aXN0cykgc2VsZi5tYWtlRGlyKGZvbGRlcik7XG5cbiAgICAgICAgICAgICAgICBzZWxmLmZzLm9wZW4ocGF0aCwgXCJ3XCIsIDQzOCwgZnVuY3Rpb24gKGVyciwgZmQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5mcy5jaG1vZChwYXRoLCA0MzgsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmZzLm9wZW4ocGF0aCwgXCJ3XCIsIDQzOCwgZnVuY3Rpb24gKGVyciwgZmQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5mcy53cml0ZShmZCwgY29udGVudCwgMCwgY29udGVudC5sZW5ndGgsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZnMuY2xvc2UoZmQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmZzLmNobW9kKHBhdGgsIGF0dHIgfHwgNDM4LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZmQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZnMud3JpdGUoZmQsIGNvbnRlbnQsIDAsIGNvbnRlbnQubGVuZ3RoLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5mcy5jbG9zZShmZCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmZzLmNobW9kKHBhdGgsIGF0dHIgfHwgNDM4LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZnMuY2htb2QocGF0aCwgYXR0ciB8fCA0MzgsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59O1xuXG5VdGlscy5wcm90b3R5cGUuZmluZEZpbGVzID0gZnVuY3Rpb24gKC8qU3RyaW5nKi8gcGF0aCkge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuXG4gICAgZnVuY3Rpb24gZmluZFN5bmMoLypTdHJpbmcqLyBkaXIsIC8qUmVnRXhwKi8gcGF0dGVybiwgLypCb29sZWFuKi8gcmVjdXJzaXZlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgcGF0dGVybiA9PT0gXCJib29sZWFuXCIpIHtcbiAgICAgICAgICAgIHJlY3Vyc2l2ZSA9IHBhdHRlcm47XG4gICAgICAgICAgICBwYXR0ZXJuID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGxldCBmaWxlcyA9IFtdO1xuICAgICAgICBzZWxmLmZzLnJlYWRkaXJTeW5jKGRpcikuZm9yRWFjaChmdW5jdGlvbiAoZmlsZSkge1xuICAgICAgICAgICAgdmFyIHBhdGggPSBwdGguam9pbihkaXIsIGZpbGUpO1xuXG4gICAgICAgICAgICBpZiAoc2VsZi5mcy5zdGF0U3luYyhwYXRoKS5pc0RpcmVjdG9yeSgpICYmIHJlY3Vyc2l2ZSkgZmlsZXMgPSBmaWxlcy5jb25jYXQoZmluZFN5bmMocGF0aCwgcGF0dGVybiwgcmVjdXJzaXZlKSk7XG5cbiAgICAgICAgICAgIGlmICghcGF0dGVybiB8fCBwYXR0ZXJuLnRlc3QocGF0aCkpIHtcbiAgICAgICAgICAgICAgICBmaWxlcy5wdXNoKHB0aC5ub3JtYWxpemUocGF0aCkgKyAoc2VsZi5mcy5zdGF0U3luYyhwYXRoKS5pc0RpcmVjdG9yeSgpID8gc2VsZi5zZXAgOiBcIlwiKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZmlsZXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZpbmRTeW5jKHBhdGgsIHVuZGVmaW5lZCwgdHJ1ZSk7XG59O1xuXG5VdGlscy5wcm90b3R5cGUuZ2V0QXR0cmlidXRlcyA9IGZ1bmN0aW9uICgpIHt9O1xuXG5VdGlscy5wcm90b3R5cGUuc2V0QXR0cmlidXRlcyA9IGZ1bmN0aW9uICgpIHt9O1xuXG4vLyBTVEFUSUMgZnVuY3Rpb25zXG5cbi8vIGNyYzMyIHNpbmdsZSB1cGRhdGUgKGl0IGlzIHBhcnQgb2YgY3JjMzIpXG5VdGlscy5jcmMzMnVwZGF0ZSA9IGZ1bmN0aW9uIChjcmMsIGJ5dGUpIHtcbiAgICByZXR1cm4gY3JjVGFibGVbKGNyYyBeIGJ5dGUpICYgMHhmZl0gXiAoY3JjID4+PiA4KTtcbn07XG5cblV0aWxzLmNyYzMyID0gZnVuY3Rpb24gKGJ1Zikge1xuICAgIGlmICh0eXBlb2YgYnVmID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGJ1ZiA9IEJ1ZmZlci5mcm9tKGJ1ZiwgXCJ1dGY4XCIpO1xuICAgIH1cbiAgICAvLyBHZW5lcmF0ZSBjcmNUYWJsZVxuICAgIGlmICghY3JjVGFibGUubGVuZ3RoKSBnZW5DUkNUYWJsZSgpO1xuXG4gICAgbGV0IGxlbiA9IGJ1Zi5sZW5ndGg7XG4gICAgbGV0IGNyYyA9IH4wO1xuICAgIGZvciAobGV0IG9mZiA9IDA7IG9mZiA8IGxlbjsgKSBjcmMgPSBVdGlscy5jcmMzMnVwZGF0ZShjcmMsIGJ1ZltvZmYrK10pO1xuICAgIC8vIHhvciBhbmQgY2FzdCBhcyB1aW50MzIgbnVtYmVyXG4gICAgcmV0dXJuIH5jcmMgPj4+IDA7XG59O1xuXG5VdGlscy5tZXRob2RUb1N0cmluZyA9IGZ1bmN0aW9uICgvKk51bWJlciovIG1ldGhvZCkge1xuICAgIHN3aXRjaCAobWV0aG9kKSB7XG4gICAgICAgIGNhc2UgQ29uc3RhbnRzLlNUT1JFRDpcbiAgICAgICAgICAgIHJldHVybiBcIlNUT1JFRCAoXCIgKyBtZXRob2QgKyBcIilcIjtcbiAgICAgICAgY2FzZSBDb25zdGFudHMuREVGTEFURUQ6XG4gICAgICAgICAgICByZXR1cm4gXCJERUZMQVRFRCAoXCIgKyBtZXRob2QgKyBcIilcIjtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBcIlVOU1VQUE9SVEVEIChcIiArIG1ldGhvZCArIFwiKVwiO1xuICAgIH1cbn07XG5cbi8vIHJlbW92ZXMgXCIuLlwiIHN0eWxlIHBhdGggZWxlbWVudHNcblV0aWxzLmNhbm9uaWNhbCA9IGZ1bmN0aW9uICgvKnN0cmluZyovIHBhdGgpIHtcbiAgICBpZiAoIXBhdGgpIHJldHVybiBcIlwiO1xuICAgIC8vIHRyaWNrIG5vcm1hbGl6ZSB0aGluayBwYXRoIGlzIGFic29sdXRlXG4gICAgdmFyIHNhZmVTdWZmaXggPSBwdGgucG9zaXgubm9ybWFsaXplKFwiL1wiICsgcGF0aC5zcGxpdChcIlxcXFxcIikuam9pbihcIi9cIikpO1xuICAgIHJldHVybiBwdGguam9pbihcIi5cIiwgc2FmZVN1ZmZpeCk7XG59O1xuXG4vLyBtYWtlIGFib2x1dGUgcGF0aHMgdGFraW5nIHByZWZpeCBhcyByb290IGZvbGRlclxuVXRpbHMuc2FuaXRpemUgPSBmdW5jdGlvbiAoLypzdHJpbmcqLyBwcmVmaXgsIC8qc3RyaW5nKi8gbmFtZSkge1xuICAgIHByZWZpeCA9IHB0aC5yZXNvbHZlKHB0aC5ub3JtYWxpemUocHJlZml4KSk7XG4gICAgdmFyIHBhcnRzID0gbmFtZS5zcGxpdChcIi9cIik7XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBwYXJ0cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgdmFyIHBhdGggPSBwdGgubm9ybWFsaXplKHB0aC5qb2luKHByZWZpeCwgcGFydHMuc2xpY2UoaSwgbCkuam9pbihwdGguc2VwKSkpO1xuICAgICAgICBpZiAocGF0aC5pbmRleE9mKHByZWZpeCkgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBwYXRoO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBwdGgubm9ybWFsaXplKHB0aC5qb2luKHByZWZpeCwgcHRoLmJhc2VuYW1lKG5hbWUpKSk7XG59O1xuXG4vLyBjb252ZXJ0cyBidWZmZXIsIFVpbnQ4QXJyYXksIHN0cmluZyB0eXBlcyB0byBidWZmZXJcblV0aWxzLnRvQnVmZmVyID0gZnVuY3Rpb24gdG9CdWZmZXIoLypidWZmZXIsIFVpbnQ4QXJyYXksIHN0cmluZyovIGlucHV0KSB7XG4gICAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihpbnB1dCkpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0O1xuICAgIH0gZWxzZSBpZiAoaW5wdXQgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7XG4gICAgICAgIHJldHVybiBCdWZmZXIuZnJvbShpbnB1dCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZXhwZWN0IHN0cmluZyBhbGwgb3RoZXIgdmFsdWVzIGFyZSBpbnZhbGlkIGFuZCByZXR1cm4gZW1wdHkgYnVmZmVyXG4gICAgICAgIHJldHVybiB0eXBlb2YgaW5wdXQgPT09IFwic3RyaW5nXCIgPyBCdWZmZXIuZnJvbShpbnB1dCwgXCJ1dGY4XCIpIDogQnVmZmVyLmFsbG9jKDApO1xuICAgIH1cbn07XG5cblV0aWxzLnJlYWRCaWdVSW50NjRMRSA9IGZ1bmN0aW9uICgvKkJ1ZmZlciovIGJ1ZmZlciwgLyppbnQqLyBpbmRleCkge1xuICAgIHZhciBzbGljZSA9IEJ1ZmZlci5mcm9tKGJ1ZmZlci5zbGljZShpbmRleCwgaW5kZXggKyA4KSk7XG4gICAgc2xpY2Uuc3dhcDY0KCk7XG5cbiAgICByZXR1cm4gcGFyc2VJbnQoYDB4JHtzbGljZS50b1N0cmluZyhcImhleFwiKX1gKTtcbn07XG5cblV0aWxzLmlzV2luID0gaXNXaW47IC8vIERvIHdlIGhhdmUgd2luZG93cyBzeXN0ZW1cblV0aWxzLmNyY1RhYmxlID0gY3JjVGFibGU7XG4iXSwibmFtZXMiOlsiZnN5c3RlbSIsInJlcXVpcmUiLCJwdGgiLCJDb25zdGFudHMiLCJFcnJvcnMiLCJpc1dpbiIsInByb2Nlc3MiLCJwbGF0Zm9ybSIsImlzX09iaiIsIm9iaiIsImNyY1RhYmxlIiwiVWludDMyQXJyYXkiLCJtYXAiLCJ0IiwiYyIsImsiLCJVdGlscyIsIm9wdHMiLCJzZXAiLCJmcyIsInN0YXRTeW5jIiwibW9kdWxlIiwiZXhwb3J0cyIsInByb3RvdHlwZSIsIm1ha2VEaXIiLCJmb2xkZXIiLCJzZWxmIiwibWtkaXJTeW5jIiwiZnBhdGgiLCJyZXNvbHZlZFBhdGgiLCJzcGxpdCIsImZvckVhY2giLCJuYW1lIiwic3Vic3RyIiwic3RhdCIsImUiLCJpc0ZpbGUiLCJGSUxFX0lOX1RIRV9XQVkiLCJyZXBsYWNlIiwid3JpdGVGaWxlVG8iLCJwYXRoIiwiY29udGVudCIsIm92ZXJ3cml0ZSIsImF0dHIiLCJleGlzdHNTeW5jIiwiaXNEaXJlY3RvcnkiLCJkaXJuYW1lIiwiZmQiLCJvcGVuU3luYyIsImNobW9kU3luYyIsIndyaXRlU3luYyIsImxlbmd0aCIsImNsb3NlU3luYyIsIndyaXRlRmlsZVRvQXN5bmMiLCJjYWxsYmFjayIsInVuZGVmaW5lZCIsImV4aXN0cyIsImV4aXN0IiwiZXJyIiwib3BlbiIsImNobW9kIiwid3JpdGUiLCJjbG9zZSIsImZpbmRGaWxlcyIsImZpbmRTeW5jIiwiZGlyIiwicGF0dGVybiIsInJlY3Vyc2l2ZSIsImZpbGVzIiwicmVhZGRpclN5bmMiLCJmaWxlIiwiam9pbiIsImNvbmNhdCIsInRlc3QiLCJwdXNoIiwibm9ybWFsaXplIiwiZ2V0QXR0cmlidXRlcyIsInNldEF0dHJpYnV0ZXMiLCJjcmMzMnVwZGF0ZSIsImNyYyIsImJ5dGUiLCJjcmMzMiIsImJ1ZiIsIkJ1ZmZlciIsImZyb20iLCJnZW5DUkNUYWJsZSIsImxlbiIsIm9mZiIsIm1ldGhvZFRvU3RyaW5nIiwibWV0aG9kIiwiU1RPUkVEIiwiREVGTEFURUQiLCJjYW5vbmljYWwiLCJzYWZlU3VmZml4IiwicG9zaXgiLCJzYW5pdGl6ZSIsInByZWZpeCIsInJlc29sdmUiLCJwYXJ0cyIsImkiLCJsIiwic2xpY2UiLCJpbmRleE9mIiwiYmFzZW5hbWUiLCJ0b0J1ZmZlciIsImlucHV0IiwiaXNCdWZmZXIiLCJVaW50OEFycmF5IiwiYWxsb2MiLCJyZWFkQmlnVUludDY0TEUiLCJidWZmZXIiLCJpbmRleCIsInN3YXA2NCIsInBhcnNlSW50IiwidG9TdHJpbmciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/adm-zip/util/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/adm-zip/zipEntry.js":
/*!******************************************!*\
  !*** ./node_modules/adm-zip/zipEntry.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nvar Utils = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/adm-zip/util/index.js\"), Headers = __webpack_require__(/*! ./headers */ \"(rsc)/./node_modules/adm-zip/headers/index.js\"), Constants = Utils.Constants, Methods = __webpack_require__(/*! ./methods */ \"(rsc)/./node_modules/adm-zip/methods/index.js\");\nmodule.exports = function(/*Buffer*/ input) {\n    var _entryHeader = new Headers.EntryHeader(), _entryName = Buffer.alloc(0), _comment = Buffer.alloc(0), _isDirectory = false, uncompressedData = null, _extra = Buffer.alloc(0);\n    function getCompressedDataFromZip() {\n        if (!input || !Buffer.isBuffer(input)) {\n            return Buffer.alloc(0);\n        }\n        _entryHeader.loadDataHeaderFromBinary(input);\n        return input.slice(_entryHeader.realDataOffset, _entryHeader.realDataOffset + _entryHeader.compressedSize);\n    }\n    function crc32OK(data1) {\n        // if bit 3 (0x08) of the general-purpose flags field is set, then the CRC-32 and file sizes are not known when the header is written\n        if ((_entryHeader.flags & 0x8) !== 0x8) {\n            if (Utils.crc32(data1) !== _entryHeader.dataHeader.crc) {\n                return false;\n            }\n        } else {\n        // @TODO: load and check data descriptor header\n        // The fields in the local header are filled with zero, and the CRC-32 and size are appended in a 12-byte structure\n        // (optionally preceded by a 4-byte signature) immediately after the compressed data:\n        }\n        return true;\n    }\n    function decompress(/*Boolean*/ async, /*Function*/ callback, /*String, Buffer*/ pass) {\n        if (typeof callback === \"undefined\" && typeof async === \"string\") {\n            pass = async;\n            async = void 0;\n        }\n        if (_isDirectory) {\n            if (async && callback) {\n                callback(Buffer.alloc(0), Utils.Errors.DIRECTORY_CONTENT_ERROR); //si added error.\n            }\n            return Buffer.alloc(0);\n        }\n        var compressedData = getCompressedDataFromZip();\n        if (compressedData.length === 0) {\n            // File is empty, nothing to decompress.\n            if (async && callback) callback(compressedData);\n            return compressedData;\n        }\n        if (_entryHeader.encripted) {\n            if (\"string\" !== typeof pass && !Buffer.isBuffer(pass)) {\n                throw new Error(\"ADM-ZIP: Incompatible password parameter\");\n            }\n            compressedData = Methods.ZipCrypto.decrypt(compressedData, _entryHeader, pass);\n        }\n        var data1 = Buffer.alloc(_entryHeader.size);\n        switch(_entryHeader.method){\n            case Utils.Constants.STORED:\n                compressedData.copy(data1);\n                if (!crc32OK(data1)) {\n                    if (async && callback) callback(data1, Utils.Errors.BAD_CRC); //si added error\n                    throw new Error(Utils.Errors.BAD_CRC);\n                } else {\n                    //si added otherwise did not seem to return data.\n                    if (async && callback) callback(data1);\n                    return data1;\n                }\n            case Utils.Constants.DEFLATED:\n                var inflater = new Methods.Inflater(compressedData);\n                if (!async) {\n                    const result = inflater.inflate(data1);\n                    result.copy(data1, 0);\n                    if (!crc32OK(data1)) {\n                        throw new Error(Utils.Errors.BAD_CRC + \" \" + _entryName.toString());\n                    }\n                    return data1;\n                } else {\n                    inflater.inflateAsync(function(result) {\n                        result.copy(result, 0);\n                        if (callback) {\n                            if (!crc32OK(result)) {\n                                callback(result, Utils.Errors.BAD_CRC); //si added error\n                            } else {\n                                callback(result);\n                            }\n                        }\n                    });\n                }\n                break;\n            default:\n                if (async && callback) callback(Buffer.alloc(0), Utils.Errors.UNKNOWN_METHOD);\n                throw new Error(Utils.Errors.UNKNOWN_METHOD);\n        }\n    }\n    function compress(/*Boolean*/ async, /*Function*/ callback) {\n        if ((!uncompressedData || !uncompressedData.length) && Buffer.isBuffer(input)) {\n            // no data set or the data wasn't changed to require recompression\n            if (async && callback) callback(getCompressedDataFromZip());\n            return getCompressedDataFromZip();\n        }\n        if (uncompressedData.length && !_isDirectory) {\n            var compressedData;\n            // Local file header\n            switch(_entryHeader.method){\n                case Utils.Constants.STORED:\n                    _entryHeader.compressedSize = _entryHeader.size;\n                    compressedData = Buffer.alloc(uncompressedData.length);\n                    uncompressedData.copy(compressedData);\n                    if (async && callback) callback(compressedData);\n                    return compressedData;\n                default:\n                case Utils.Constants.DEFLATED:\n                    var deflater = new Methods.Deflater(uncompressedData);\n                    if (!async) {\n                        var deflated = deflater.deflate();\n                        _entryHeader.compressedSize = deflated.length;\n                        return deflated;\n                    } else {\n                        deflater.deflateAsync(function(data1) {\n                            compressedData = Buffer.alloc(data1.length);\n                            _entryHeader.compressedSize = data1.length;\n                            data1.copy(compressedData);\n                            callback && callback(compressedData);\n                        });\n                    }\n                    deflater = null;\n                    break;\n            }\n        } else if (async && callback) {\n            callback(Buffer.alloc(0));\n        } else {\n            return Buffer.alloc(0);\n        }\n    }\n    function readUInt64LE(buffer, offset) {\n        return (buffer.readUInt32LE(offset + 4) << 4) + buffer.readUInt32LE(offset);\n    }\n    function parseExtra(data1) {\n        var offset = 0;\n        var signature, size, part;\n        while(offset < data1.length){\n            signature = data1.readUInt16LE(offset);\n            offset += 2;\n            size = data1.readUInt16LE(offset);\n            offset += 2;\n            part = data1.slice(offset, offset + size);\n            offset += size;\n            if (Constants.ID_ZIP64 === signature) {\n                parseZip64ExtendedInformation(part);\n            }\n        }\n    }\n    //Override header field values with values from the ZIP64 extra field\n    function parseZip64ExtendedInformation(data1) {\n        var size, compressedSize, offset, diskNumStart;\n        if (data1.length >= Constants.EF_ZIP64_SCOMP) {\n            size = readUInt64LE(data1, Constants.EF_ZIP64_SUNCOMP);\n            if (_entryHeader.size === Constants.EF_ZIP64_OR_32) {\n                _entryHeader.size = size;\n            }\n        }\n        if (data1.length >= Constants.EF_ZIP64_RHO) {\n            compressedSize = readUInt64LE(data1, Constants.EF_ZIP64_SCOMP);\n            if (_entryHeader.compressedSize === Constants.EF_ZIP64_OR_32) {\n                _entryHeader.compressedSize = compressedSize;\n            }\n        }\n        if (data1.length >= Constants.EF_ZIP64_DSN) {\n            offset = readUInt64LE(data1, Constants.EF_ZIP64_RHO);\n            if (_entryHeader.offset === Constants.EF_ZIP64_OR_32) {\n                _entryHeader.offset = offset;\n            }\n        }\n        if (data1.length >= Constants.EF_ZIP64_DSN + 4) {\n            diskNumStart = data1.readUInt32LE(Constants.EF_ZIP64_DSN);\n            if (_entryHeader.diskNumStart === Constants.EF_ZIP64_OR_16) {\n                _entryHeader.diskNumStart = diskNumStart;\n            }\n        }\n    }\n    return {\n        get entryName () {\n            return _entryName.toString();\n        },\n        get rawEntryName () {\n            return _entryName;\n        },\n        set entryName (val){\n            _entryName = Utils.toBuffer(val);\n            var lastChar = _entryName[_entryName.length - 1];\n            _isDirectory = lastChar === 47 || lastChar === 92;\n            _entryHeader.fileNameLength = _entryName.length;\n        },\n        get extra () {\n            return _extra;\n        },\n        set extra (val){\n            _extra = val;\n            _entryHeader.extraLength = val.length;\n            parseExtra(val);\n        },\n        get comment () {\n            return _comment.toString();\n        },\n        set comment (val){\n            _comment = Utils.toBuffer(val);\n            _entryHeader.commentLength = _comment.length;\n        },\n        get name () {\n            var n = _entryName.toString();\n            return _isDirectory ? n.substr(n.length - 1).split(\"/\").pop() : n.split(\"/\").pop();\n        },\n        get isDirectory () {\n            return _isDirectory;\n        },\n        getCompressedData: function() {\n            return compress(false, null);\n        },\n        getCompressedDataAsync: function(/*Function*/ callback) {\n            compress(true, callback);\n        },\n        setData: function(value) {\n            uncompressedData = Utils.toBuffer(value);\n            if (!_isDirectory && uncompressedData.length) {\n                _entryHeader.size = uncompressedData.length;\n                _entryHeader.method = Utils.Constants.DEFLATED;\n                _entryHeader.crc = Utils.crc32(value);\n                _entryHeader.changed = true;\n            } else {\n                // folders and blank files should be stored\n                _entryHeader.method = Utils.Constants.STORED;\n            }\n        },\n        getData: function(pass) {\n            if (_entryHeader.changed) {\n                return uncompressedData;\n            } else {\n                return decompress(false, null, pass);\n            }\n        },\n        getDataAsync: function(/*Function*/ callback, pass) {\n            if (_entryHeader.changed) {\n                callback(uncompressedData);\n            } else {\n                decompress(true, callback, pass);\n            }\n        },\n        set attr (attr){\n            _entryHeader.attr = attr;\n        },\n        get attr () {\n            return _entryHeader.attr;\n        },\n        set header (/*Buffer*/ data){\n            _entryHeader.loadFromBinary(data);\n        },\n        get header () {\n            return _entryHeader;\n        },\n        packHeader: function() {\n            // 1. create header (buffer)\n            var header = _entryHeader.entryHeaderToBinary();\n            var addpos = Utils.Constants.CENHDR;\n            // 2. add file name\n            _entryName.copy(header, addpos);\n            addpos += _entryName.length;\n            // 3. add extra data\n            if (_entryHeader.extraLength) {\n                _extra.copy(header, addpos);\n                addpos += _entryHeader.extraLength;\n            }\n            // 4. add file comment\n            if (_entryHeader.commentLength) {\n                _comment.copy(header, addpos);\n            }\n            return header;\n        },\n        toJSON: function() {\n            const bytes = function(nr) {\n                return \"<\" + (nr && nr.length + \" bytes buffer\" || \"null\") + \">\";\n            };\n            return {\n                entryName: this.entryName,\n                name: this.name,\n                comment: this.comment,\n                isDirectory: this.isDirectory,\n                header: _entryHeader.toJSON(),\n                compressedData: bytes(input),\n                data: bytes(uncompressedData)\n            };\n        },\n        toString: function() {\n            return JSON.stringify(this.toJSON(), null, \"\t\");\n        }\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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WUFDVCxPQUFPN0Y7UUFDWDtRQUVBK0YsWUFBWTtZQUNSLDRCQUE0QjtZQUM1QixJQUFJRixTQUFTN0YsYUFBYWdHLG1CQUFtQjtZQUM3QyxJQUFJQyxTQUFTekcsTUFBTUcsU0FBUyxDQUFDdUcsTUFBTTtZQUNuQyxtQkFBbUI7WUFDbkJoRyxXQUFXa0MsSUFBSSxDQUFDeUQsUUFBUUk7WUFDeEJBLFVBQVUvRixXQUFXMEIsTUFBTTtZQUMzQixvQkFBb0I7WUFDcEIsSUFBSTVCLGFBQWE0RSxXQUFXLEVBQUU7Z0JBQzFCcEUsT0FBTzRCLElBQUksQ0FBQ3lELFFBQVFJO2dCQUNwQkEsVUFBVWpHLGFBQWE0RSxXQUFXO1lBQ3RDO1lBQ0Esc0JBQXNCO1lBQ3RCLElBQUk1RSxhQUFhOEUsYUFBYSxFQUFFO2dCQUM1QnpFLFNBQVMrQixJQUFJLENBQUN5RCxRQUFRSTtZQUMxQjtZQUNBLE9BQU9KO1FBQ1g7UUFFQU0sUUFBUTtZQUNKLE1BQU1DLFFBQVEsU0FBVUMsRUFBRTtnQkFDdEIsT0FBTyxNQUFPLE9BQU9BLEdBQUd6RSxNQUFNLEdBQUcsbUJBQW9CLE1BQUssSUFBSztZQUNuRTtZQUVBLE9BQU87Z0JBQ0h5QyxXQUFXLElBQUksQ0FBQ0EsU0FBUztnQkFDekJVLE1BQU0sSUFBSSxDQUFDQSxJQUFJO2dCQUNmRixTQUFTLElBQUksQ0FBQ0EsT0FBTztnQkFDckJPLGFBQWEsSUFBSSxDQUFDQSxXQUFXO2dCQUM3QlMsUUFBUTdGLGFBQWFtRyxNQUFNO2dCQUMzQnhFLGdCQUFnQnlFLE1BQU1yRztnQkFDdEJpQixNQUFNb0YsTUFBTTdGO1lBQ2hCO1FBQ0o7UUFFQW9DLFVBQVU7WUFDTixPQUFPMkQsS0FBS0MsU0FBUyxDQUFDLElBQUksQ0FBQ0osTUFBTSxJQUFJLE1BQU07UUFDL0M7SUFDSjtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbW9uZGF5QXNzaXN0YW50Ly4vbm9kZV9tb2R1bGVzL2FkbS16aXAvemlwRW50cnkuanM/YTQwMyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgVXRpbHMgPSByZXF1aXJlKFwiLi91dGlsXCIpLFxuICAgIEhlYWRlcnMgPSByZXF1aXJlKFwiLi9oZWFkZXJzXCIpLFxuICAgIENvbnN0YW50cyA9IFV0aWxzLkNvbnN0YW50cyxcbiAgICBNZXRob2RzID0gcmVxdWlyZShcIi4vbWV0aG9kc1wiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoLypCdWZmZXIqLyBpbnB1dCkge1xuICAgIHZhciBfZW50cnlIZWFkZXIgPSBuZXcgSGVhZGVycy5FbnRyeUhlYWRlcigpLFxuICAgICAgICBfZW50cnlOYW1lID0gQnVmZmVyLmFsbG9jKDApLFxuICAgICAgICBfY29tbWVudCA9IEJ1ZmZlci5hbGxvYygwKSxcbiAgICAgICAgX2lzRGlyZWN0b3J5ID0gZmFsc2UsXG4gICAgICAgIHVuY29tcHJlc3NlZERhdGEgPSBudWxsLFxuICAgICAgICBfZXh0cmEgPSBCdWZmZXIuYWxsb2MoMCk7XG5cbiAgICBmdW5jdGlvbiBnZXRDb21wcmVzc2VkRGF0YUZyb21aaXAoKSB7XG4gICAgICAgIGlmICghaW5wdXQgfHwgIUJ1ZmZlci5pc0J1ZmZlcihpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBCdWZmZXIuYWxsb2MoMCk7XG4gICAgICAgIH1cbiAgICAgICAgX2VudHJ5SGVhZGVyLmxvYWREYXRhSGVhZGVyRnJvbUJpbmFyeShpbnB1dCk7XG4gICAgICAgIHJldHVybiBpbnB1dC5zbGljZShfZW50cnlIZWFkZXIucmVhbERhdGFPZmZzZXQsIF9lbnRyeUhlYWRlci5yZWFsRGF0YU9mZnNldCArIF9lbnRyeUhlYWRlci5jb21wcmVzc2VkU2l6ZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JjMzJPSyhkYXRhKSB7XG4gICAgICAgIC8vIGlmIGJpdCAzICgweDA4KSBvZiB0aGUgZ2VuZXJhbC1wdXJwb3NlIGZsYWdzIGZpZWxkIGlzIHNldCwgdGhlbiB0aGUgQ1JDLTMyIGFuZCBmaWxlIHNpemVzIGFyZSBub3Qga25vd24gd2hlbiB0aGUgaGVhZGVyIGlzIHdyaXR0ZW5cbiAgICAgICAgaWYgKChfZW50cnlIZWFkZXIuZmxhZ3MgJiAweDgpICE9PSAweDgpIHtcbiAgICAgICAgICAgIGlmIChVdGlscy5jcmMzMihkYXRhKSAhPT0gX2VudHJ5SGVhZGVyLmRhdGFIZWFkZXIuY3JjKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gQFRPRE86IGxvYWQgYW5kIGNoZWNrIGRhdGEgZGVzY3JpcHRvciBoZWFkZXJcbiAgICAgICAgICAgIC8vIFRoZSBmaWVsZHMgaW4gdGhlIGxvY2FsIGhlYWRlciBhcmUgZmlsbGVkIHdpdGggemVybywgYW5kIHRoZSBDUkMtMzIgYW5kIHNpemUgYXJlIGFwcGVuZGVkIGluIGEgMTItYnl0ZSBzdHJ1Y3R1cmVcbiAgICAgICAgICAgIC8vIChvcHRpb25hbGx5IHByZWNlZGVkIGJ5IGEgNC1ieXRlIHNpZ25hdHVyZSkgaW1tZWRpYXRlbHkgYWZ0ZXIgdGhlIGNvbXByZXNzZWQgZGF0YTpcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkZWNvbXByZXNzKC8qQm9vbGVhbiovIGFzeW5jLCAvKkZ1bmN0aW9uKi8gY2FsbGJhY2ssIC8qU3RyaW5nLCBCdWZmZXIqLyBwYXNzKSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mIGFzeW5jID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBwYXNzID0gYXN5bmM7XG4gICAgICAgICAgICBhc3luYyA9IHZvaWQgMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoX2lzRGlyZWN0b3J5KSB7XG4gICAgICAgICAgICBpZiAoYXN5bmMgJiYgY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhCdWZmZXIuYWxsb2MoMCksIFV0aWxzLkVycm9ycy5ESVJFQ1RPUllfQ09OVEVOVF9FUlJPUik7IC8vc2kgYWRkZWQgZXJyb3IuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gQnVmZmVyLmFsbG9jKDApO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGNvbXByZXNzZWREYXRhID0gZ2V0Q29tcHJlc3NlZERhdGFGcm9tWmlwKCk7XG5cbiAgICAgICAgaWYgKGNvbXByZXNzZWREYXRhLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgLy8gRmlsZSBpcyBlbXB0eSwgbm90aGluZyB0byBkZWNvbXByZXNzLlxuICAgICAgICAgICAgaWYgKGFzeW5jICYmIGNhbGxiYWNrKSBjYWxsYmFjayhjb21wcmVzc2VkRGF0YSk7XG4gICAgICAgICAgICByZXR1cm4gY29tcHJlc3NlZERhdGE7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoX2VudHJ5SGVhZGVyLmVuY3JpcHRlZCkge1xuICAgICAgICAgICAgaWYgKFwic3RyaW5nXCIgIT09IHR5cGVvZiBwYXNzICYmICFCdWZmZXIuaXNCdWZmZXIocGFzcykpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBRE0tWklQOiBJbmNvbXBhdGlibGUgcGFzc3dvcmQgcGFyYW1ldGVyXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29tcHJlc3NlZERhdGEgPSBNZXRob2RzLlppcENyeXB0by5kZWNyeXB0KGNvbXByZXNzZWREYXRhLCBfZW50cnlIZWFkZXIsIHBhc3MpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGRhdGEgPSBCdWZmZXIuYWxsb2MoX2VudHJ5SGVhZGVyLnNpemUpO1xuXG4gICAgICAgIHN3aXRjaCAoX2VudHJ5SGVhZGVyLm1ldGhvZCkge1xuICAgICAgICAgICAgY2FzZSBVdGlscy5Db25zdGFudHMuU1RPUkVEOlxuICAgICAgICAgICAgICAgIGNvbXByZXNzZWREYXRhLmNvcHkoZGF0YSk7XG4gICAgICAgICAgICAgICAgaWYgKCFjcmMzMk9LKGRhdGEpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhc3luYyAmJiBjYWxsYmFjaykgY2FsbGJhY2soZGF0YSwgVXRpbHMuRXJyb3JzLkJBRF9DUkMpOyAvL3NpIGFkZGVkIGVycm9yXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihVdGlscy5FcnJvcnMuQkFEX0NSQyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy9zaSBhZGRlZCBvdGhlcndpc2UgZGlkIG5vdCBzZWVtIHRvIHJldHVybiBkYXRhLlxuICAgICAgICAgICAgICAgICAgICBpZiAoYXN5bmMgJiYgY2FsbGJhY2spIGNhbGxiYWNrKGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIFV0aWxzLkNvbnN0YW50cy5ERUZMQVRFRDpcbiAgICAgICAgICAgICAgICB2YXIgaW5mbGF0ZXIgPSBuZXcgTWV0aG9kcy5JbmZsYXRlcihjb21wcmVzc2VkRGF0YSk7XG4gICAgICAgICAgICAgICAgaWYgKCFhc3luYykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBpbmZsYXRlci5pbmZsYXRlKGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQuY29weShkYXRhLCAwKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjcmMzMk9LKGRhdGEpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoVXRpbHMuRXJyb3JzLkJBRF9DUkMgKyBcIiBcIiArIF9lbnRyeU5hbWUudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaW5mbGF0ZXIuaW5mbGF0ZUFzeW5jKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5jb3B5KHJlc3VsdCwgMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWNyYzMyT0socmVzdWx0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhyZXN1bHQsIFV0aWxzLkVycm9ycy5CQURfQ1JDKTsgLy9zaSBhZGRlZCBlcnJvclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGlmIChhc3luYyAmJiBjYWxsYmFjaykgY2FsbGJhY2soQnVmZmVyLmFsbG9jKDApLCBVdGlscy5FcnJvcnMuVU5LTk9XTl9NRVRIT0QpO1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihVdGlscy5FcnJvcnMuVU5LTk9XTl9NRVRIT0QpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29tcHJlc3MoLypCb29sZWFuKi8gYXN5bmMsIC8qRnVuY3Rpb24qLyBjYWxsYmFjaykge1xuICAgICAgICBpZiAoKCF1bmNvbXByZXNzZWREYXRhIHx8ICF1bmNvbXByZXNzZWREYXRhLmxlbmd0aCkgJiYgQnVmZmVyLmlzQnVmZmVyKGlucHV0KSkge1xuICAgICAgICAgICAgLy8gbm8gZGF0YSBzZXQgb3IgdGhlIGRhdGEgd2Fzbid0IGNoYW5nZWQgdG8gcmVxdWlyZSByZWNvbXByZXNzaW9uXG4gICAgICAgICAgICBpZiAoYXN5bmMgJiYgY2FsbGJhY2spIGNhbGxiYWNrKGdldENvbXByZXNzZWREYXRhRnJvbVppcCgpKTtcbiAgICAgICAgICAgIHJldHVybiBnZXRDb21wcmVzc2VkRGF0YUZyb21aaXAoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1bmNvbXByZXNzZWREYXRhLmxlbmd0aCAmJiAhX2lzRGlyZWN0b3J5KSB7XG4gICAgICAgICAgICB2YXIgY29tcHJlc3NlZERhdGE7XG4gICAgICAgICAgICAvLyBMb2NhbCBmaWxlIGhlYWRlclxuICAgICAgICAgICAgc3dpdGNoIChfZW50cnlIZWFkZXIubWV0aG9kKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBVdGlscy5Db25zdGFudHMuU1RPUkVEOlxuICAgICAgICAgICAgICAgICAgICBfZW50cnlIZWFkZXIuY29tcHJlc3NlZFNpemUgPSBfZW50cnlIZWFkZXIuc2l6ZTtcblxuICAgICAgICAgICAgICAgICAgICBjb21wcmVzc2VkRGF0YSA9IEJ1ZmZlci5hbGxvYyh1bmNvbXByZXNzZWREYXRhLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgIHVuY29tcHJlc3NlZERhdGEuY29weShjb21wcmVzc2VkRGF0YSk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGFzeW5jICYmIGNhbGxiYWNrKSBjYWxsYmFjayhjb21wcmVzc2VkRGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjb21wcmVzc2VkRGF0YTtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGNhc2UgVXRpbHMuQ29uc3RhbnRzLkRFRkxBVEVEOlxuICAgICAgICAgICAgICAgICAgICB2YXIgZGVmbGF0ZXIgPSBuZXcgTWV0aG9kcy5EZWZsYXRlcih1bmNvbXByZXNzZWREYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFhc3luYykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRlZmxhdGVkID0gZGVmbGF0ZXIuZGVmbGF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2VudHJ5SGVhZGVyLmNvbXByZXNzZWRTaXplID0gZGVmbGF0ZWQubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRlZmxhdGVkO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVmbGF0ZXIuZGVmbGF0ZUFzeW5jKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcHJlc3NlZERhdGEgPSBCdWZmZXIuYWxsb2MoZGF0YS5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9lbnRyeUhlYWRlci5jb21wcmVzc2VkU2l6ZSA9IGRhdGEubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuY29weShjb21wcmVzc2VkRGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soY29tcHJlc3NlZERhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZGVmbGF0ZXIgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChhc3luYyAmJiBjYWxsYmFjaykge1xuICAgICAgICAgICAgY2FsbGJhY2soQnVmZmVyLmFsbG9jKDApKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBCdWZmZXIuYWxsb2MoMCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZWFkVUludDY0TEUoYnVmZmVyLCBvZmZzZXQpIHtcbiAgICAgICAgcmV0dXJuIChidWZmZXIucmVhZFVJbnQzMkxFKG9mZnNldCArIDQpIDw8IDQpICsgYnVmZmVyLnJlYWRVSW50MzJMRShvZmZzZXQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlRXh0cmEoZGF0YSkge1xuICAgICAgICB2YXIgb2Zmc2V0ID0gMDtcbiAgICAgICAgdmFyIHNpZ25hdHVyZSwgc2l6ZSwgcGFydDtcbiAgICAgICAgd2hpbGUgKG9mZnNldCA8IGRhdGEubGVuZ3RoKSB7XG4gICAgICAgICAgICBzaWduYXR1cmUgPSBkYXRhLnJlYWRVSW50MTZMRShvZmZzZXQpO1xuICAgICAgICAgICAgb2Zmc2V0ICs9IDI7XG4gICAgICAgICAgICBzaXplID0gZGF0YS5yZWFkVUludDE2TEUob2Zmc2V0KTtcbiAgICAgICAgICAgIG9mZnNldCArPSAyO1xuICAgICAgICAgICAgcGFydCA9IGRhdGEuc2xpY2Uob2Zmc2V0LCBvZmZzZXQgKyBzaXplKTtcbiAgICAgICAgICAgIG9mZnNldCArPSBzaXplO1xuICAgICAgICAgICAgaWYgKENvbnN0YW50cy5JRF9aSVA2NCA9PT0gc2lnbmF0dXJlKSB7XG4gICAgICAgICAgICAgICAgcGFyc2VaaXA2NEV4dGVuZGVkSW5mb3JtYXRpb24ocGFydCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvL092ZXJyaWRlIGhlYWRlciBmaWVsZCB2YWx1ZXMgd2l0aCB2YWx1ZXMgZnJvbSB0aGUgWklQNjQgZXh0cmEgZmllbGRcbiAgICBmdW5jdGlvbiBwYXJzZVppcDY0RXh0ZW5kZWRJbmZvcm1hdGlvbihkYXRhKSB7XG4gICAgICAgIHZhciBzaXplLCBjb21wcmVzc2VkU2l6ZSwgb2Zmc2V0LCBkaXNrTnVtU3RhcnQ7XG5cbiAgICAgICAgaWYgKGRhdGEubGVuZ3RoID49IENvbnN0YW50cy5FRl9aSVA2NF9TQ09NUCkge1xuICAgICAgICAgICAgc2l6ZSA9IHJlYWRVSW50NjRMRShkYXRhLCBDb25zdGFudHMuRUZfWklQNjRfU1VOQ09NUCk7XG4gICAgICAgICAgICBpZiAoX2VudHJ5SGVhZGVyLnNpemUgPT09IENvbnN0YW50cy5FRl9aSVA2NF9PUl8zMikge1xuICAgICAgICAgICAgICAgIF9lbnRyeUhlYWRlci5zaXplID0gc2l6ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5sZW5ndGggPj0gQ29uc3RhbnRzLkVGX1pJUDY0X1JITykge1xuICAgICAgICAgICAgY29tcHJlc3NlZFNpemUgPSByZWFkVUludDY0TEUoZGF0YSwgQ29uc3RhbnRzLkVGX1pJUDY0X1NDT01QKTtcbiAgICAgICAgICAgIGlmIChfZW50cnlIZWFkZXIuY29tcHJlc3NlZFNpemUgPT09IENvbnN0YW50cy5FRl9aSVA2NF9PUl8zMikge1xuICAgICAgICAgICAgICAgIF9lbnRyeUhlYWRlci5jb21wcmVzc2VkU2l6ZSA9IGNvbXByZXNzZWRTaXplO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLmxlbmd0aCA+PSBDb25zdGFudHMuRUZfWklQNjRfRFNOKSB7XG4gICAgICAgICAgICBvZmZzZXQgPSByZWFkVUludDY0TEUoZGF0YSwgQ29uc3RhbnRzLkVGX1pJUDY0X1JITyk7XG4gICAgICAgICAgICBpZiAoX2VudHJ5SGVhZGVyLm9mZnNldCA9PT0gQ29uc3RhbnRzLkVGX1pJUDY0X09SXzMyKSB7XG4gICAgICAgICAgICAgICAgX2VudHJ5SGVhZGVyLm9mZnNldCA9IG9mZnNldDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5sZW5ndGggPj0gQ29uc3RhbnRzLkVGX1pJUDY0X0RTTiArIDQpIHtcbiAgICAgICAgICAgIGRpc2tOdW1TdGFydCA9IGRhdGEucmVhZFVJbnQzMkxFKENvbnN0YW50cy5FRl9aSVA2NF9EU04pO1xuICAgICAgICAgICAgaWYgKF9lbnRyeUhlYWRlci5kaXNrTnVtU3RhcnQgPT09IENvbnN0YW50cy5FRl9aSVA2NF9PUl8xNikge1xuICAgICAgICAgICAgICAgIF9lbnRyeUhlYWRlci5kaXNrTnVtU3RhcnQgPSBkaXNrTnVtU3RhcnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBnZXQgZW50cnlOYW1lKCkge1xuICAgICAgICAgICAgcmV0dXJuIF9lbnRyeU5hbWUudG9TdHJpbmcoKTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0IHJhd0VudHJ5TmFtZSgpIHtcbiAgICAgICAgICAgIHJldHVybiBfZW50cnlOYW1lO1xuICAgICAgICB9LFxuICAgICAgICBzZXQgZW50cnlOYW1lKHZhbCkge1xuICAgICAgICAgICAgX2VudHJ5TmFtZSA9IFV0aWxzLnRvQnVmZmVyKHZhbCk7XG4gICAgICAgICAgICB2YXIgbGFzdENoYXIgPSBfZW50cnlOYW1lW19lbnRyeU5hbWUubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICBfaXNEaXJlY3RvcnkgPSBsYXN0Q2hhciA9PT0gNDcgfHwgbGFzdENoYXIgPT09IDkyO1xuICAgICAgICAgICAgX2VudHJ5SGVhZGVyLmZpbGVOYW1lTGVuZ3RoID0gX2VudHJ5TmFtZS5sZW5ndGg7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0IGV4dHJhKCkge1xuICAgICAgICAgICAgcmV0dXJuIF9leHRyYTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0IGV4dHJhKHZhbCkge1xuICAgICAgICAgICAgX2V4dHJhID0gdmFsO1xuICAgICAgICAgICAgX2VudHJ5SGVhZGVyLmV4dHJhTGVuZ3RoID0gdmFsLmxlbmd0aDtcbiAgICAgICAgICAgIHBhcnNlRXh0cmEodmFsKTtcbiAgICAgICAgfSxcblxuICAgICAgICBnZXQgY29tbWVudCgpIHtcbiAgICAgICAgICAgIHJldHVybiBfY29tbWVudC50b1N0cmluZygpO1xuICAgICAgICB9LFxuICAgICAgICBzZXQgY29tbWVudCh2YWwpIHtcbiAgICAgICAgICAgIF9jb21tZW50ID0gVXRpbHMudG9CdWZmZXIodmFsKTtcbiAgICAgICAgICAgIF9lbnRyeUhlYWRlci5jb21tZW50TGVuZ3RoID0gX2NvbW1lbnQubGVuZ3RoO1xuICAgICAgICB9LFxuXG4gICAgICAgIGdldCBuYW1lKCkge1xuICAgICAgICAgICAgdmFyIG4gPSBfZW50cnlOYW1lLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICByZXR1cm4gX2lzRGlyZWN0b3J5XG4gICAgICAgICAgICAgICAgPyBuXG4gICAgICAgICAgICAgICAgICAgICAgLnN1YnN0cihuLmxlbmd0aCAtIDEpXG4gICAgICAgICAgICAgICAgICAgICAgLnNwbGl0KFwiL1wiKVxuICAgICAgICAgICAgICAgICAgICAgIC5wb3AoKVxuICAgICAgICAgICAgICAgIDogbi5zcGxpdChcIi9cIikucG9wKCk7XG4gICAgICAgIH0sXG4gICAgICAgIGdldCBpc0RpcmVjdG9yeSgpIHtcbiAgICAgICAgICAgIHJldHVybiBfaXNEaXJlY3Rvcnk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0Q29tcHJlc3NlZERhdGE6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBjb21wcmVzcyhmYWxzZSwgbnVsbCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0Q29tcHJlc3NlZERhdGFBc3luYzogZnVuY3Rpb24gKC8qRnVuY3Rpb24qLyBjYWxsYmFjaykge1xuICAgICAgICAgICAgY29tcHJlc3ModHJ1ZSwgY2FsbGJhY2spO1xuICAgICAgICB9LFxuXG4gICAgICAgIHNldERhdGE6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgdW5jb21wcmVzc2VkRGF0YSA9IFV0aWxzLnRvQnVmZmVyKHZhbHVlKTtcbiAgICAgICAgICAgIGlmICghX2lzRGlyZWN0b3J5ICYmIHVuY29tcHJlc3NlZERhdGEubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgX2VudHJ5SGVhZGVyLnNpemUgPSB1bmNvbXByZXNzZWREYXRhLmxlbmd0aDtcbiAgICAgICAgICAgICAgICBfZW50cnlIZWFkZXIubWV0aG9kID0gVXRpbHMuQ29uc3RhbnRzLkRFRkxBVEVEO1xuICAgICAgICAgICAgICAgIF9lbnRyeUhlYWRlci5jcmMgPSBVdGlscy5jcmMzMih2YWx1ZSk7XG4gICAgICAgICAgICAgICAgX2VudHJ5SGVhZGVyLmNoYW5nZWQgPSB0cnVlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBmb2xkZXJzIGFuZCBibGFuayBmaWxlcyBzaG91bGQgYmUgc3RvcmVkXG4gICAgICAgICAgICAgICAgX2VudHJ5SGVhZGVyLm1ldGhvZCA9IFV0aWxzLkNvbnN0YW50cy5TVE9SRUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0RGF0YTogZnVuY3Rpb24gKHBhc3MpIHtcbiAgICAgICAgICAgIGlmIChfZW50cnlIZWFkZXIuY2hhbmdlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB1bmNvbXByZXNzZWREYXRhO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGVjb21wcmVzcyhmYWxzZSwgbnVsbCwgcGFzcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0RGF0YUFzeW5jOiBmdW5jdGlvbiAoLypGdW5jdGlvbiovIGNhbGxiYWNrLCBwYXNzKSB7XG4gICAgICAgICAgICBpZiAoX2VudHJ5SGVhZGVyLmNoYW5nZWQpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayh1bmNvbXByZXNzZWREYXRhKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZGVjb21wcmVzcyh0cnVlLCBjYWxsYmFjaywgcGFzcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgc2V0IGF0dHIoYXR0cikge1xuICAgICAgICAgICAgX2VudHJ5SGVhZGVyLmF0dHIgPSBhdHRyO1xuICAgICAgICB9LFxuICAgICAgICBnZXQgYXR0cigpIHtcbiAgICAgICAgICAgIHJldHVybiBfZW50cnlIZWFkZXIuYXR0cjtcbiAgICAgICAgfSxcblxuICAgICAgICBzZXQgaGVhZGVyKC8qQnVmZmVyKi8gZGF0YSkge1xuICAgICAgICAgICAgX2VudHJ5SGVhZGVyLmxvYWRGcm9tQmluYXJ5KGRhdGEpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGdldCBoZWFkZXIoKSB7XG4gICAgICAgICAgICByZXR1cm4gX2VudHJ5SGVhZGVyO1xuICAgICAgICB9LFxuXG4gICAgICAgIHBhY2tIZWFkZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vIDEuIGNyZWF0ZSBoZWFkZXIgKGJ1ZmZlcilcbiAgICAgICAgICAgIHZhciBoZWFkZXIgPSBfZW50cnlIZWFkZXIuZW50cnlIZWFkZXJUb0JpbmFyeSgpO1xuICAgICAgICAgICAgdmFyIGFkZHBvcyA9IFV0aWxzLkNvbnN0YW50cy5DRU5IRFI7XG4gICAgICAgICAgICAvLyAyLiBhZGQgZmlsZSBuYW1lXG4gICAgICAgICAgICBfZW50cnlOYW1lLmNvcHkoaGVhZGVyLCBhZGRwb3MpO1xuICAgICAgICAgICAgYWRkcG9zICs9IF9lbnRyeU5hbWUubGVuZ3RoO1xuICAgICAgICAgICAgLy8gMy4gYWRkIGV4dHJhIGRhdGFcbiAgICAgICAgICAgIGlmIChfZW50cnlIZWFkZXIuZXh0cmFMZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBfZXh0cmEuY29weShoZWFkZXIsIGFkZHBvcyk7XG4gICAgICAgICAgICAgICAgYWRkcG9zICs9IF9lbnRyeUhlYWRlci5leHRyYUxlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIDQuIGFkZCBmaWxlIGNvbW1lbnRcbiAgICAgICAgICAgIGlmIChfZW50cnlIZWFkZXIuY29tbWVudExlbmd0aCkge1xuICAgICAgICAgICAgICAgIF9jb21tZW50LmNvcHkoaGVhZGVyLCBhZGRwb3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGhlYWRlcjtcbiAgICAgICAgfSxcblxuICAgICAgICB0b0pTT046IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGNvbnN0IGJ5dGVzID0gZnVuY3Rpb24gKG5yKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiPFwiICsgKChuciAmJiBuci5sZW5ndGggKyBcIiBieXRlcyBidWZmZXJcIikgfHwgXCJudWxsXCIpICsgXCI+XCI7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGVudHJ5TmFtZTogdGhpcy5lbnRyeU5hbWUsXG4gICAgICAgICAgICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgICAgICAgICAgIGNvbW1lbnQ6IHRoaXMuY29tbWVudCxcbiAgICAgICAgICAgICAgICBpc0RpcmVjdG9yeTogdGhpcy5pc0RpcmVjdG9yeSxcbiAgICAgICAgICAgICAgICBoZWFkZXI6IF9lbnRyeUhlYWRlci50b0pTT04oKSxcbiAgICAgICAgICAgICAgICBjb21wcmVzc2VkRGF0YTogYnl0ZXMoaW5wdXQpLFxuICAgICAgICAgICAgICAgIGRhdGE6IGJ5dGVzKHVuY29tcHJlc3NlZERhdGEpXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuXG4gICAgICAgIHRvU3RyaW5nOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodGhpcy50b0pTT04oKSwgbnVsbCwgXCJcXHRcIik7XG4gICAgICAgIH1cbiAgICB9O1xufTtcbiJdLCJuYW1lcyI6WyJVdGlscyIsInJlcXVpcmUiLCJIZWFkZXJzIiwiQ29uc3RhbnRzIiwiTWV0aG9kcyIsIm1vZHVsZSIsImV4cG9ydHMiLCJpbnB1dCIsIl9lbnRyeUhlYWRlciIsIkVudHJ5SGVhZGVyIiwiX2VudHJ5TmFtZSIsIkJ1ZmZlciIsImFsbG9jIiwiX2NvbW1lbnQiLCJfaXNEaXJlY3RvcnkiLCJ1bmNvbXByZXNzZWREYXRhIiwiX2V4dHJhIiwiZ2V0Q29tcHJlc3NlZERhdGFGcm9tWmlwIiwiaXNCdWZmZXIiLCJsb2FkRGF0YUhlYWRlckZyb21CaW5hcnkiLCJzbGljZSIsInJlYWxEYXRhT2Zmc2V0IiwiY29tcHJlc3NlZFNpemUiLCJjcmMzMk9LIiwiZGF0YSIsImZsYWdzIiwiY3JjMzIiLCJkYXRhSGVhZGVyIiwiY3JjIiwiZGVjb21wcmVzcyIsImFzeW5jIiwiY2FsbGJhY2siLCJwYXNzIiwiRXJyb3JzIiwiRElSRUNUT1JZX0NPTlRFTlRfRVJST1IiLCJjb21wcmVzc2VkRGF0YSIsImxlbmd0aCIsImVuY3JpcHRlZCIsIkVycm9yIiwiWmlwQ3J5cHRvIiwiZGVjcnlwdCIsInNpemUiLCJtZXRob2QiLCJTVE9SRUQiLCJjb3B5IiwiQkFEX0NSQyIsIkRFRkxBVEVEIiwiaW5mbGF0ZXIiLCJJbmZsYXRlciIsInJlc3VsdCIsImluZmxhdGUiLCJ0b1N0cmluZyIsImluZmxhdGVBc3luYyIsIlVOS05PV05fTUVUSE9EIiwiY29tcHJlc3MiLCJkZWZsYXRlciIsIkRlZmxhdGVyIiwiZGVmbGF0ZWQiLCJkZWZsYXRlIiwiZGVmbGF0ZUFzeW5jIiwicmVhZFVJbnQ2NExFIiwiYnVmZmVyIiwib2Zmc2V0IiwicmVhZFVJbnQzMkxFIiwicGFyc2VFeHRyYSIsInNpZ25hdHVyZSIsInBhcnQiLCJyZWFkVUludDE2TEUiLCJJRF9aSVA2NCIsInBhcnNlWmlwNjRFeHRlbmRlZEluZm9ybWF0aW9uIiwiZGlza051bVN0YXJ0IiwiRUZfWklQNjRfU0NPTVAiLCJFRl9aSVA2NF9TVU5DT01QIiwiRUZfWklQNjRfT1JfMzIiLCJFRl9aSVA2NF9SSE8iLCJFRl9aSVA2NF9EU04iLCJFRl9aSVA2NF9PUl8xNiIsImVudHJ5TmFtZSIsInJhd0VudHJ5TmFtZSIsInZhbCIsInRvQnVmZmVyIiwibGFzdENoYXIiLCJmaWxlTmFtZUxlbmd0aCIsImV4dHJhIiwiZXh0cmFMZW5ndGgiLCJjb21tZW50IiwiY29tbWVudExlbmd0aCIsIm5hbWUiLCJuIiwic3Vic3RyIiwic3BsaXQiLCJwb3AiLCJpc0RpcmVjdG9yeSIsImdldENvbXByZXNzZWREYXRhIiwiZ2V0Q29tcHJlc3NlZERhdGFBc3luYyIsInNldERhdGEiLCJ2YWx1ZSIsImNoYW5nZWQiLCJnZXREYXRhIiwiZ2V0RGF0YUFzeW5jIiwiYXR0ciIsImhlYWRlciIsImxvYWRGcm9tQmluYXJ5IiwicGFja0hlYWRlciIsImVudHJ5SGVhZGVyVG9CaW5hcnkiLCJhZGRwb3MiLCJDRU5IRFIiLCJ0b0pTT04iLCJieXRlcyIsIm5yIiwiSlNPTiIsInN0cmluZ2lmeSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/adm-zip/zipEntry.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/adm-zip/zipFile.js":
/*!*****************************************!*\
  !*** ./node_modules/adm-zip/zipFile.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst ZipEntry = __webpack_require__(/*! ./zipEntry */ \"(rsc)/./node_modules/adm-zip/zipEntry.js\");\nconst Headers = __webpack_require__(/*! ./headers */ \"(rsc)/./node_modules/adm-zip/headers/index.js\");\nconst Utils = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/adm-zip/util/index.js\");\nmodule.exports = function(/*Buffer|null*/ inBuffer, /** object */ options) {\n    var entryList = [], entryTable = {}, _comment = Buffer.alloc(0), mainHeader = new Headers.MainHeader(), loadedEntries = false;\n    // assign options\n    const opts = Object.assign(Object.create(null), options);\n    const { noSort } = opts;\n    if (inBuffer) {\n        // is a memory buffer\n        readMainHeader(opts.readEntries);\n    } else {\n        // none. is a new file\n        loadedEntries = true;\n    }\n    function iterateEntries(callback) {\n        const totalEntries = mainHeader.diskEntries; // total number of entries\n        let index = mainHeader.offset; // offset of first CEN header\n        for(let i = 0; i < totalEntries; i++){\n            let tmp = index;\n            const entry = new ZipEntry(inBuffer);\n            entry.header = inBuffer.slice(tmp, tmp += Utils.Constants.CENHDR);\n            entry.entryName = inBuffer.slice(tmp, tmp += entry.header.fileNameLength);\n            index += entry.header.entryHeaderSize;\n            callback(entry);\n        }\n    }\n    function readEntries() {\n        loadedEntries = true;\n        entryTable = {};\n        entryList = new Array(mainHeader.diskEntries); // total number of entries\n        var index = mainHeader.offset; // offset of first CEN header\n        for(var i = 0; i < entryList.length; i++){\n            var tmp = index, entry = new ZipEntry(inBuffer);\n            entry.header = inBuffer.slice(tmp, tmp += Utils.Constants.CENHDR);\n            entry.entryName = inBuffer.slice(tmp, tmp += entry.header.fileNameLength);\n            if (entry.header.extraLength) {\n                entry.extra = inBuffer.slice(tmp, tmp += entry.header.extraLength);\n            }\n            if (entry.header.commentLength) entry.comment = inBuffer.slice(tmp, tmp + entry.header.commentLength);\n            index += entry.header.entryHeaderSize;\n            entryList[i] = entry;\n            entryTable[entry.entryName] = entry;\n        }\n    }\n    function readMainHeader(/*Boolean*/ readNow) {\n        var i = inBuffer.length - Utils.Constants.ENDHDR, max = Math.max(0, i - 0xffff), n = max, endStart = inBuffer.length, endOffset = -1, commentEnd = 0;\n        for(i; i >= n; i--){\n            if (inBuffer[i] !== 0x50) continue; // quick check that the byte is 'P'\n            if (inBuffer.readUInt32LE(i) === Utils.Constants.ENDSIG) {\n                // \"PK\\005\\006\"\n                endOffset = i;\n                commentEnd = i;\n                endStart = i + Utils.Constants.ENDHDR;\n                // We already found a regular signature, let's look just a bit further to check if there's any zip64 signature\n                n = i - Utils.Constants.END64HDR;\n                continue;\n            }\n            if (inBuffer.readUInt32LE(i) === Utils.Constants.END64SIG) {\n                // Found a zip64 signature, let's continue reading the whole zip64 record\n                n = max;\n                continue;\n            }\n            if (inBuffer.readUInt32LE(i) === Utils.Constants.ZIP64SIG) {\n                // Found the zip64 record, let's determine it's size\n                endOffset = i;\n                endStart = i + Utils.readBigUInt64LE(inBuffer, i + Utils.Constants.ZIP64SIZE) + Utils.Constants.ZIP64LEAD;\n                break;\n            }\n        }\n        if (!~endOffset) throw new Error(Utils.Errors.INVALID_FORMAT);\n        mainHeader.loadFromBinary(inBuffer.slice(endOffset, endStart));\n        if (mainHeader.commentLength) {\n            _comment = inBuffer.slice(commentEnd + Utils.Constants.ENDHDR);\n        }\n        if (readNow) readEntries();\n    }\n    function sortEntries() {\n        if (entryList.length > 1 && !noSort) {\n            entryList.sort((a, b)=>a.entryName.toLowerCase().localeCompare(b.entryName.toLowerCase()));\n        }\n    }\n    return {\n        /**\n         * Returns an array of ZipEntry objects existent in the current opened archive\n         * @return Array\n         */ get entries () {\n            if (!loadedEntries) {\n                readEntries();\n            }\n            return entryList;\n        },\n        /**\n         * Archive comment\n         * @return {String}\n         */ get comment () {\n            return _comment.toString();\n        },\n        set comment (val){\n            _comment = Utils.toBuffer(val);\n            mainHeader.commentLength = _comment.length;\n        },\n        getEntryCount: function() {\n            if (!loadedEntries) {\n                return mainHeader.diskEntries;\n            }\n            return entryList.length;\n        },\n        forEach: function(callback) {\n            if (!loadedEntries) {\n                iterateEntries(callback);\n                return;\n            }\n            entryList.forEach(callback);\n        },\n        /**\n         * Returns a reference to the entry with the given name or null if entry is inexistent\n         *\n         * @param entryName\n         * @return ZipEntry\n         */ getEntry: function(/*String*/ entryName) {\n            if (!loadedEntries) {\n                readEntries();\n            }\n            return entryTable[entryName] || null;\n        },\n        /**\n         * Adds the given entry to the entry list\n         *\n         * @param entry\n         */ setEntry: function(/*ZipEntry*/ entry) {\n            if (!loadedEntries) {\n                readEntries();\n            }\n            entryList.push(entry);\n            entryTable[entry.entryName] = entry;\n            mainHeader.totalEntries = entryList.length;\n        },\n        /**\n         * Removes the entry with the given name from the entry list.\n         *\n         * If the entry is a directory, then all nested files and directories will be removed\n         * @param entryName\n         */ deleteEntry: function(/*String*/ entryName) {\n            if (!loadedEntries) {\n                readEntries();\n            }\n            var entry = entryTable[entryName];\n            if (entry && entry.isDirectory) {\n                var _self = this;\n                this.getEntryChildren(entry).forEach(function(child) {\n                    if (child.entryName !== entryName) {\n                        _self.deleteEntry(child.entryName);\n                    }\n                });\n            }\n            entryList.splice(entryList.indexOf(entry), 1);\n            delete entryTable[entryName];\n            mainHeader.totalEntries = entryList.length;\n        },\n        /**\n         *  Iterates and returns all nested files and directories of the given entry\n         *\n         * @param entry\n         * @return Array\n         */ getEntryChildren: function(/*ZipEntry*/ entry) {\n            if (!loadedEntries) {\n                readEntries();\n            }\n            if (entry && entry.isDirectory) {\n                const list = [];\n                const name = entry.entryName;\n                const len = name.length;\n                entryList.forEach(function(zipEntry) {\n                    if (zipEntry.entryName.substr(0, len) === name) {\n                        list.push(zipEntry);\n                    }\n                });\n                return list;\n            }\n            return [];\n        },\n        /**\n         * Returns the zip file\n         *\n         * @return Buffer\n         */ compressToBuffer: function() {\n            if (!loadedEntries) {\n                readEntries();\n            }\n            sortEntries();\n            const dataBlock = [];\n            const entryHeaders = [];\n            let totalSize = 0;\n            let dindex = 0;\n            mainHeader.size = 0;\n            mainHeader.offset = 0;\n            for (const entry of entryList){\n                // compress data and set local and entry header accordingly. Reason why is called first\n                const compressedData = entry.getCompressedData();\n                // 1. construct data header\n                entry.header.offset = dindex;\n                const dataHeader = entry.header.dataHeaderToBinary();\n                const entryNameLen = entry.rawEntryName.length;\n                // 1.2. postheader - data after data header\n                const postHeader = Buffer.alloc(entryNameLen + entry.extra.length);\n                entry.rawEntryName.copy(postHeader, 0);\n                postHeader.copy(entry.extra, entryNameLen);\n                // 2. offsets\n                const dataLength = dataHeader.length + postHeader.length + compressedData.length;\n                dindex += dataLength;\n                // 3. store values in sequence\n                dataBlock.push(dataHeader);\n                dataBlock.push(postHeader);\n                dataBlock.push(compressedData);\n                // 4. construct entry header\n                const entryHeader = entry.packHeader();\n                entryHeaders.push(entryHeader);\n                // 5. update main header\n                mainHeader.size += entryHeader.length;\n                totalSize += dataLength + entryHeader.length;\n            }\n            totalSize += mainHeader.mainHeaderSize; // also includes zip file comment length\n            // point to end of data and beginning of central directory first record\n            mainHeader.offset = dindex;\n            dindex = 0;\n            const outBuffer = Buffer.alloc(totalSize);\n            // write data blocks\n            for (const content of dataBlock){\n                content.copy(outBuffer, dindex);\n                dindex += content.length;\n            }\n            // write central directory entries\n            for (const content of entryHeaders){\n                content.copy(outBuffer, dindex);\n                dindex += content.length;\n            }\n            // write main header\n            const mh = mainHeader.toBinary();\n            if (_comment) {\n                _comment.copy(mh, Utils.Constants.ENDHDR); // add zip file comment\n            }\n            mh.copy(outBuffer, dindex);\n            return outBuffer;\n        },\n        toAsyncBuffer: function(/*Function*/ onSuccess, /*Function*/ onFail, /*Function*/ onItemStart, /*Function*/ onItemEnd) {\n            try {\n                if (!loadedEntries) {\n                    readEntries();\n                }\n                sortEntries();\n                const dataBlock = [];\n                const entryHeaders = [];\n                let totalSize = 0;\n                let dindex = 0;\n                mainHeader.size = 0;\n                mainHeader.offset = 0;\n                const compress2Buffer = function(entryLists) {\n                    if (entryLists.length) {\n                        const entry = entryLists.pop();\n                        const name = entry.entryName + entry.extra.toString();\n                        if (onItemStart) onItemStart(name);\n                        entry.getCompressedDataAsync(function(compressedData) {\n                            if (onItemEnd) onItemEnd(name);\n                            entry.header.offset = dindex;\n                            // data header\n                            const dataHeader = entry.header.dataHeaderToBinary();\n                            const postHeader = Buffer.alloc(name.length, name);\n                            const dataLength = dataHeader.length + postHeader.length + compressedData.length;\n                            dindex += dataLength;\n                            dataBlock.push(dataHeader);\n                            dataBlock.push(postHeader);\n                            dataBlock.push(compressedData);\n                            const entryHeader = entry.packHeader();\n                            entryHeaders.push(entryHeader);\n                            mainHeader.size += entryHeader.length;\n                            totalSize += dataLength + entryHeader.length;\n                            compress2Buffer(entryLists);\n                        });\n                    } else {\n                        totalSize += mainHeader.mainHeaderSize; // also includes zip file comment length\n                        // point to end of data and beginning of central directory first record\n                        mainHeader.offset = dindex;\n                        dindex = 0;\n                        const outBuffer = Buffer.alloc(totalSize);\n                        dataBlock.forEach(function(content) {\n                            content.copy(outBuffer, dindex); // write data blocks\n                            dindex += content.length;\n                        });\n                        entryHeaders.forEach(function(content) {\n                            content.copy(outBuffer, dindex); // write central directory entries\n                            dindex += content.length;\n                        });\n                        const mh = mainHeader.toBinary();\n                        if (_comment) {\n                            _comment.copy(mh, Utils.Constants.ENDHDR); // add zip file comment\n                        }\n                        mh.copy(outBuffer, dindex); // write main header\n                        onSuccess(outBuffer);\n                    }\n                };\n                compress2Buffer(entryList);\n            } catch (e) {\n                onFail(e);\n            }\n        }\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/adm-zip/zipFile.js\n");

/***/ })

};
;